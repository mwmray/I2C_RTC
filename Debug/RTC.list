
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002650  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800275c  0800275c  0000375c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002808  08002808  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002808  08002808  00003808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002810  08002810  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002810  08002810  00003810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002814  08002814  00003814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002818  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  08002874  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08002874  00004348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093dd  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178e  00000000  00000000  0000d462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0000ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000716  00000000  00000000  0000f500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014c6  00000000  00000000  0000fc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf2c  00000000  00000000  000110dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a2d  00000000  00000000  0001e008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0a35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a28  00000000  00000000  000a0a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000a34a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002744 	.word	0x08002744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002744 	.word	0x08002744

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b089      	sub	sp, #36	@ 0x24
 8000160:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000162:	f000 fc2d 	bl	80009c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000166:	f000 f85d 	bl	8000224 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800016a:	f000 f8f9 	bl	8000360 <MX_GPIO_Init>
	MX_I2C1_Init();
 800016e:	f000 f89f 	bl	80002b0 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000172:	f000 f8cb 	bl	800030c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	if (Ds1307_Init(&CLK) == DS1307_SUCCESS) {
 8000176:	4825      	ldr	r0, [pc, #148]	@ (800020c <main+0xb0>)
 8000178:	f000 faae 	bl	80006d8 <Ds1307_Init>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d106      	bne.n	8000190 <main+0x34>
		HAL_UART_Transmit(&huart1, "clock ok\n\r", strlen("clock ok\n\r"), 100);
 8000182:	2364      	movs	r3, #100	@ 0x64
 8000184:	220a      	movs	r2, #10
 8000186:	4922      	ldr	r1, [pc, #136]	@ (8000210 <main+0xb4>)
 8000188:	4822      	ldr	r0, [pc, #136]	@ (8000214 <main+0xb8>)
 800018a:	f001 fcab 	bl	8001ae4 <HAL_UART_Transmit>
 800018e:	e005      	b.n	800019c <main+0x40>
	} else {
		HAL_UART_Transmit(&huart1, "clock is not ok\n\r",
 8000190:	2364      	movs	r3, #100	@ 0x64
 8000192:	2211      	movs	r2, #17
 8000194:	4920      	ldr	r1, [pc, #128]	@ (8000218 <main+0xbc>)
 8000196:	481f      	ldr	r0, [pc, #124]	@ (8000214 <main+0xb8>)
 8000198:	f001 fca4 	bl	8001ae4 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Ds1307_Read_Time(&CLK);
 800019c:	481b      	ldr	r0, [pc, #108]	@ (800020c <main+0xb0>)
 800019e:	f000 fad5 	bl	800074c <Ds1307_Read_Time>
		uint8_t length = sprintf(str,
				"%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r", CLK.hour, CLK.min,
 80001a2:	4b1a      	ldr	r3, [pc, #104]	@ (800020c <main+0xb0>)
 80001a4:	7a9b      	ldrb	r3, [r3, #10]
		uint8_t length = sprintf(str,
 80001a6:	461d      	mov	r5, r3
				"%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r", CLK.hour, CLK.min,
 80001a8:	4b18      	ldr	r3, [pc, #96]	@ (800020c <main+0xb0>)
 80001aa:	7a5b      	ldrb	r3, [r3, #9]
		uint8_t length = sprintf(str,
 80001ac:	461e      	mov	r6, r3
				CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 80001ae:	4b17      	ldr	r3, [pc, #92]	@ (800020c <main+0xb0>)
 80001b0:	7a1b      	ldrb	r3, [r3, #8]
		uint8_t length = sprintf(str,
 80001b2:	461a      	mov	r2, r3
				CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 80001b4:	4b15      	ldr	r3, [pc, #84]	@ (800020c <main+0xb0>)
 80001b6:	7adb      	ldrb	r3, [r3, #11]
		uint8_t length = sprintf(str,
 80001b8:	4619      	mov	r1, r3
				CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 80001ba:	4b14      	ldr	r3, [pc, #80]	@ (800020c <main+0xb0>)
 80001bc:	7b1b      	ldrb	r3, [r3, #12]
		uint8_t length = sprintf(str,
 80001be:	4618      	mov	r0, r3
				CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 80001c0:	4b12      	ldr	r3, [pc, #72]	@ (800020c <main+0xb0>)
 80001c2:	7b5b      	ldrb	r3, [r3, #13]
		uint8_t length = sprintf(str,
 80001c4:	461c      	mov	r4, r3
				CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 80001c6:	4b11      	ldr	r3, [pc, #68]	@ (800020c <main+0xb0>)
 80001c8:	89db      	ldrh	r3, [r3, #14]
		uint8_t length = sprintf(str,
 80001ca:	9304      	str	r3, [sp, #16]
 80001cc:	9403      	str	r4, [sp, #12]
 80001ce:	9002      	str	r0, [sp, #8]
 80001d0:	9101      	str	r1, [sp, #4]
 80001d2:	9200      	str	r2, [sp, #0]
 80001d4:	4633      	mov	r3, r6
 80001d6:	462a      	mov	r2, r5
 80001d8:	4910      	ldr	r1, [pc, #64]	@ (800021c <main+0xc0>)
 80001da:	4811      	ldr	r0, [pc, #68]	@ (8000220 <main+0xc4>)
 80001dc:	f001 fe02 	bl	8001de4 <siprintf>
 80001e0:	4603      	mov	r3, r0
 80001e2:	71fb      	strb	r3, [r7, #7]
		Ds1307_Write_Time(&CLK);
 80001e4:	4809      	ldr	r0, [pc, #36]	@ (800020c <main+0xb0>)
 80001e6:	f000 fb5c 	bl	80008a2 <Ds1307_Write_Time>
		HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 80001ea:	480d      	ldr	r0, [pc, #52]	@ (8000220 <main+0xc4>)
 80001ec:	f7ff ffae 	bl	800014c <strlen>
 80001f0:	4603      	mov	r3, r0
 80001f2:	b29a      	uxth	r2, r3
 80001f4:	2364      	movs	r3, #100	@ 0x64
 80001f6:	490a      	ldr	r1, [pc, #40]	@ (8000220 <main+0xc4>)
 80001f8:	4806      	ldr	r0, [pc, #24]	@ (8000214 <main+0xb8>)
 80001fa:	f001 fc73 	bl	8001ae4 <HAL_UART_Transmit>
		HAL_Delay(500);
 80001fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000202:	f000 fc3f 	bl	8000a84 <HAL_Delay>
	while (1) {
 8000206:	bf00      	nop
 8000208:	e7c8      	b.n	800019c <main+0x40>
 800020a:	bf00      	nop
 800020c:	20000114 	.word	0x20000114
 8000210:	0800275c 	.word	0x0800275c
 8000214:	200000cc 	.word	0x200000cc
 8000218:	08002768 	.word	0x08002768
 800021c:	0800277c 	.word	0x0800277c
 8000220:	20000130 	.word	0x20000130

08000224 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fdf6 	bl	8001e24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000246:	2301      	movs	r3, #1
 8000248:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000258:	2302      	movs	r3, #2
 800025a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000260:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000262:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000266:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	4618      	mov	r0, r3
 800026e:	f000 ffd9 	bl	8001224 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x58>
		Error_Handler();
 8000278:	f000 f8a0 	bl	80003bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2302      	movs	r3, #2
 8000282:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fa46 	bl	8001728 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x82>
		Error_Handler();
 80002a2:	f000 f88b 	bl	80003bc <Error_Handler>
	}
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	@ 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80002b4:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002b6:	4a13      	ldr	r2, [pc, #76]	@ (8000304 <MX_I2C1_Init+0x54>)
 80002b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80002ba:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002bc:	4a12      	ldr	r2, [pc, #72]	@ (8000308 <MX_I2C1_Init+0x58>)
 80002be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <MX_I2C1_Init+0x50>)
 80002ee:	f000 fe55 	bl	8000f9c <HAL_I2C_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80002f8:	f000 f860 	bl	80003bc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000078 	.word	0x20000078
 8000304:	40005400 	.word	0x40005400
 8000308:	000186a0 	.word	0x000186a0

0800030c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f001 fb7e 	bl	8001a44 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800034e:	f000 f835 	bl	80003bc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000cc 	.word	0x200000cc
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000366:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_GPIO_Init+0x58>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a13      	ldr	r2, [pc, #76]	@ (80003b8 <MX_GPIO_Init+0x58>)
 800036c:	f043 0320 	orr.w	r3, r3, #32
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_GPIO_Init+0x58>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0320 	and.w	r3, r3, #32
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_GPIO_Init+0x58>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <MX_GPIO_Init+0x58>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <MX_GPIO_Init+0x58>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <MX_GPIO_Init+0x58>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a07      	ldr	r2, [pc, #28]	@ (80003b8 <MX_GPIO_Init+0x58>)
 800039c:	f043 0308 	orr.w	r3, r3, #8
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <MX_GPIO_Init+0x58>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0308 	and.w	r3, r3, #8
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <Error_Handler+0x8>

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	@ (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	@ (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	@ (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a15      	ldr	r2, [pc, #84]	@ (800049c <HAL_I2C_MspInit+0x70>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d123      	bne.n	8000494 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <HAL_I2C_MspInit+0x74>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a13      	ldr	r2, [pc, #76]	@ (80004a0 <HAL_I2C_MspInit+0x74>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <HAL_I2C_MspInit+0x74>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0308 	and.w	r3, r3, #8
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000464:	23c0      	movs	r3, #192	@ 0xc0
 8000466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000468:	2312      	movs	r3, #18
 800046a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046c:	2303      	movs	r3, #3
 800046e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <HAL_I2C_MspInit+0x78>)
 8000478:	f000 fc0c 	bl	8000c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <HAL_I2C_MspInit+0x74>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a07      	ldr	r2, [pc, #28]	@ (80004a0 <HAL_I2C_MspInit+0x74>)
 8000482:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <HAL_I2C_MspInit+0x74>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40005400 	.word	0x40005400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000534 <HAL_UART_MspInit+0x8c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d131      	bne.n	800052c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000538 <HAL_UART_MspInit+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000538 <HAL_UART_MspInit+0x90>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <HAL_UART_MspInit+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <HAL_UART_MspInit+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <HAL_UART_MspInit+0x90>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_UART_MspInit+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <HAL_UART_MspInit+0x94>)
 800050e:	f000 fbc1 	bl	8000c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4805      	ldr	r0, [pc, #20]	@ (800053c <HAL_UART_MspInit+0x94>)
 8000528:	f000 fbb4 	bl	8000c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40013800 	.word	0x40013800
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <NMI_Handler+0x4>

08000548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <HardFault_Handler+0x4>

08000550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <MemManage_Handler+0x4>

08000558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <UsageFault_Handler+0x4>

08000568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 fa5c 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a0:	4a14      	ldr	r2, [pc, #80]	@ (80005f4 <_sbrk+0x5c>)
 80005a2:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <_sbrk+0x60>)
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <_sbrk+0x64>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d102      	bne.n	80005ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b4:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <_sbrk+0x64>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <_sbrk+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d207      	bcs.n	80005d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c8:	f001 fc34 	bl	8001e34 <__errno>
 80005cc:	4603      	mov	r3, r0
 80005ce:	220c      	movs	r2, #12
 80005d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	e009      	b.n	80005ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005de:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <_sbrk+0x64>)
 80005e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ea:	68fb      	ldr	r3, [r7, #12]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20005000 	.word	0x20005000
 80005f8:	00000400 	.word	0x00000400
 80005fc:	200001f8 	.word	0x200001f8
 8000600:	20000348 	.word	0x20000348

08000604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000610:	f7ff fff8 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480b      	ldr	r0, [pc, #44]	@ (8000644 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000616:	490c      	ldr	r1, [pc, #48]	@ (8000648 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000618:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <LoopFillZerobss+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a09      	ldr	r2, [pc, #36]	@ (8000650 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800062c:	4c09      	ldr	r4, [pc, #36]	@ (8000654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063a:	f001 fc01 	bl	8001e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fd8d 	bl	800015c <main>
  bx lr
 8000642:	4770      	bx	lr
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800064c:	08002818 	.word	0x08002818
  ldr r2, =_sbss
 8000650:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000654:	20000348 	.word	0x20000348

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>

0800065a <BCD2DEC>:
 */
#include "DS1307.h"
#define RTC_SLA 0b1101000
#define start_address 0x00

static uint8_t BCD2DEC(uint8_t num) {
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
	return (num >> 4) * 10 + (0xf & num);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	091b      	lsrs	r3, r3, #4
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	0092      	lsls	r2, r2, #2
 800066e:	4413      	add	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b2db      	uxtb	r3, r3
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
	...

0800068c <DEC2BCD>:

static uint8_t DEC2BCD(uint8_t num) {
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	uint8_t div = num / 10;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <DEC2BCD+0x48>)
 800069a:	fba2 2303 	umull	r2, r3, r2, r3
 800069e:	08db      	lsrs	r3, r3, #3
 80006a0:	73fb      	strb	r3, [r7, #15]
	uint8_t rem = num % 10;
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <DEC2BCD+0x48>)
 80006a6:	fba3 1302 	umull	r1, r3, r3, r2
 80006aa:	08d9      	lsrs	r1, r3, #3
 80006ac:	460b      	mov	r3, r1
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	73bb      	strb	r3, [r7, #14]
	return div << 4 | rem;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	cccccccd 	.word	0xcccccccd

080006d8 <Ds1307_Init>:

ds1307_stat_t Ds1307_Init(ds1307_t *clock) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	uint8_t stat = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
	//enable oscillator
	clock->I2C_Buffer[0] = 0X00;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
	stat &= clock->AG_HW_Interface.Write_time(RTC_SLA,clock->I2C_Buffer, 1);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	2068      	movs	r0, #104	@ 0x68
 80006f4:	4798      	blx	r3
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	4013      	ands	r3, r2
 80006fe:	73fb      	strb	r3, [r7, #15]
	stat &= clock->AG_HW_Interface.Read_time(RTC_SLA,clock->I2C_Buffer, 1);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	2201      	movs	r2, #1
 8000708:	2068      	movs	r0, #104	@ 0x68
 800070a:	4798      	blx	r3
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	4013      	ands	r3, r2
 8000714:	73fb      	strb	r3, [r7, #15]

	if ((clock->I2C_Buffer[0]) & (1 << 7) == 0) {

	} else {
		clock->I2C_Buffer[0] = 0x00; //reg base address
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
		clock->I2C_Buffer[1] = 0; // clock hold bit
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
		stat &= clock->AG_HW_Interface.Write_time(RTC_SLA,clock->I2C_Buffer, 2);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	2202      	movs	r2, #2
 800072a:	2068      	movs	r0, #104	@ 0x68
 800072c:	4798      	blx	r3
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	4013      	ands	r3, r2
 8000736:	73fb      	strb	r3, [r7, #15]
	}

	if (stat == 1) {
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d101      	bne.n	8000742 <Ds1307_Init+0x6a>
		return DS1307_SUCCESS;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <Ds1307_Init+0x6c>
	} else {
		return DS1307_FAILED;
 8000742:	2301      	movs	r3, #1
	}
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <Ds1307_Read_Time>:
ds1307_stat_t Ds1307_Read_Time(ds1307_t *clock) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	//uint8_t stat = 1;
	clock->I2C_Buffer[0] = start_address;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
	if (clock->AG_HW_Interface.Write_time(RTC_SLA,clock->I2C_Buffer, 1) == 1) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	2201      	movs	r2, #1
 8000762:	2068      	movs	r0, #104	@ 0x68
 8000764:	4798      	blx	r3
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	f040 8095 	bne.w	8000898 <Ds1307_Read_Time+0x14c>
		if (clock->AG_HW_Interface.Read_time(RTC_SLA,clock->I2C_Buffer, 7) == 1) {
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2207      	movs	r2, #7
 8000776:	2068      	movs	r0, #104	@ 0x68
 8000778:	4798      	blx	r3
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	f040 8089 	bne.w	8000894 <Ds1307_Read_Time+0x148>
			clock->sec = BCD2DEC(clock->I2C_Buffer[0] & (0x7f));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff64 	bl	800065a <BCD2DEC>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	721a      	strb	r2, [r3, #8]
			clock->min = BCD2DEC(clock->I2C_Buffer[1]);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	785b      	ldrb	r3, [r3, #1]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff5b 	bl	800065a <BCD2DEC>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	725a      	strb	r2, [r3, #9]
			clock->format = clock->I2C_Buffer[2] & 0b01000000 >> 6;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	b2d9      	uxtb	r1, r3
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	7c53      	ldrb	r3, [r2, #17]
 80007ba:	f361 0300 	bfi	r3, r1, #0, #1
 80007be:	7453      	strb	r3, [r2, #17]
			if (clock->format == 1) { //12 h form
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7c5b      	ldrb	r3, [r3, #17]
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d017      	beq.n	80007fe <Ds1307_Read_Time+0xb2>
				clock->hour = BCD2DEC(clock->I2C_Buffer[2] & 0b00011111);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	f003 031f 	and.w	r3, r3, #31
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff3e 	bl	800065a <BCD2DEC>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	729a      	strb	r2, [r3, #10]
				clock->PM_AM = (clock->I2C_Buffer[2] & 0b00100000) >> 5;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	115b      	asrs	r3, r3, #5
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	b2d9      	uxtb	r1, r3
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	7c53      	ldrb	r3, [r2, #17]
 80007f6:	f361 0341 	bfi	r3, r1, #1, #1
 80007fa:	7453      	strb	r3, [r2, #17]
 80007fc:	e019      	b.n	8000832 <Ds1307_Read_Time+0xe6>
			} else {
				clock->PM_AM = (clock->I2C_Buffer[2] & 0b00111111) >> 5;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	789b      	ldrb	r3, [r3, #2]
 8000802:	115b      	asrs	r3, r3, #5
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	b2d9      	uxtb	r1, r3
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	7c53      	ldrb	r3, [r2, #17]
 800080e:	f361 0341 	bfi	r3, r1, #1, #1
 8000812:	7453      	strb	r3, [r2, #17]
				if (clock->hour > 11) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a9b      	ldrb	r3, [r3, #10]
 8000818:	2b0b      	cmp	r3, #11
 800081a:	d905      	bls.n	8000828 <Ds1307_Read_Time+0xdc>
					clock->PM_AM = 1;
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	7c53      	ldrb	r3, [r2, #17]
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	7453      	strb	r3, [r2, #17]
 8000826:	e004      	b.n	8000832 <Ds1307_Read_Time+0xe6>
				} else {
					clock->PM_AM = 0;
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	7c53      	ldrb	r3, [r2, #17]
 800082c:	f36f 0341 	bfc	r3, #1, #1
 8000830:	7453      	strb	r3, [r2, #17]
				}
			}
			clock->day = BCD2DEC(clock->I2C_Buffer[3] & 0x7);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	78db      	ldrb	r3, [r3, #3]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff0c 	bl	800065a <BCD2DEC>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	72da      	strb	r2, [r3, #11]
			clock->date = BCD2DEC(clock->I2C_Buffer[4] & 0x3f);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff00 	bl	800065a <BCD2DEC>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	731a      	strb	r2, [r3, #12]
			clock->month = BCD2DEC(clock->I2C_Buffer[5] & 0x1f);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	795b      	ldrb	r3, [r3, #5]
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fef4 	bl	800065a <BCD2DEC>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	735a      	strb	r2, [r3, #13]
			clock->year = BCD2DEC(clock->I2C_Buffer[6]) + 2000;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	799b      	ldrb	r3, [r3, #6]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff feeb 	bl	800065a <BCD2DEC>
 8000884:	4603      	mov	r3, r0
 8000886:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800088a:	b29a      	uxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	81da      	strh	r2, [r3, #14]
			return DS1307_SUCCESS;
 8000890:	2300      	movs	r3, #0
 8000892:	e002      	b.n	800089a <Ds1307_Read_Time+0x14e>
		} else {
			return DS1307_FAILED;
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <Ds1307_Read_Time+0x14e>
		}
	} else {
		return DS1307_FAILED;
 8000898:	2301      	movs	r3, #1
	}
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <Ds1307_Write_Time>:
ds1307_stat_t Ds1307_Write_Time(ds1307_t *clock) {
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	clock->I2C_Buffer[0] = start_address;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
	clock->I2C_Buffer[1] = DEC2BCD(clock->sec);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7a1b      	ldrb	r3, [r3, #8]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fee9 	bl	800068c <DEC2BCD>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	705a      	strb	r2, [r3, #1]
	clock->I2C_Buffer[2] = DEC2BCD(clock->min);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7a5b      	ldrb	r3, [r3, #9]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fee0 	bl	800068c <DEC2BCD>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	709a      	strb	r2, [r3, #2]
	if (clock->format == 1) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7c5b      	ldrb	r3, [r3, #17]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d01c      	beq.n	800091c <Ds1307_Write_Time+0x7a>
		clock->I2C_Buffer[3] = DEC2BCD(clock->hour) | (clock->format << 6)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7a9b      	ldrb	r3, [r3, #10]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fed0 	bl	800068c <DEC2BCD>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b25a      	sxtb	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7c5b      	ldrb	r3, [r3, #17]
 80008f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	019b      	lsls	r3, r3, #6
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b25a      	sxtb	r2, r3
				| (clock->PM_AM << 5);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7c5b      	ldrb	r3, [r3, #17]
 8000906:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	015b      	lsls	r3, r3, #5
 800090e:	b25b      	sxtb	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	b2da      	uxtb	r2, r3
		clock->I2C_Buffer[3] = DEC2BCD(clock->hour) | (clock->format << 6)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	70da      	strb	r2, [r3, #3]
 800091a:	e012      	b.n	8000942 <Ds1307_Write_Time+0xa0>
	} else {
		clock->I2C_Buffer[3] = DEC2BCD(clock->hour) | (clock->format << 6);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7a9b      	ldrb	r3, [r3, #10]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff feb3 	bl	800068c <DEC2BCD>
 8000926:	4603      	mov	r3, r0
 8000928:	b25a      	sxtb	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7c5b      	ldrb	r3, [r3, #17]
 800092e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	b25b      	sxtb	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b25b      	sxtb	r3, r3
 800093c:	b2da      	uxtb	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	70da      	strb	r2, [r3, #3]
	}
	clock->I2C_Buffer[4] = DEC2BCD(clock->day & 0x7);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7adb      	ldrb	r3, [r3, #11]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fe9d 	bl	800068c <DEC2BCD>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	711a      	strb	r2, [r3, #4]
	clock->I2C_Buffer[5] = DEC2BCD(clock->date & 0x3f);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7b1b      	ldrb	r3, [r3, #12]
 800095e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe91 	bl	800068c <DEC2BCD>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	715a      	strb	r2, [r3, #5]
	clock->I2C_Buffer[6] = DEC2BCD(clock->month & 0x1f);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7b5b      	ldrb	r3, [r3, #13]
 8000976:	f003 031f 	and.w	r3, r3, #31
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe85 	bl	800068c <DEC2BCD>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	719a      	strb	r2, [r3, #6]
	clock->I2C_Buffer[7] = DEC2BCD(clock->year) - 2000;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	89db      	ldrh	r3, [r3, #14]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe7b 	bl	800068c <DEC2BCD>
 8000996:	4603      	mov	r3, r0
 8000998:	3330      	adds	r3, #48	@ 0x30
 800099a:	b2da      	uxtb	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	71da      	strb	r2, [r3, #7]

	if (clock->AG_HW_Interface.Write_time(RTC_SLA,clock->I2C_Buffer, 1) == 1) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	2201      	movs	r2, #1
 80009a8:	2068      	movs	r0, #104	@ 0x68
 80009aa:	4798      	blx	r3
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d101      	bne.n	80009b6 <Ds1307_Write_Time+0x114>
		return DS1307_SUCCESS;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <Ds1307_Write_Time+0x116>
	} else {
		return DS1307_FAILED;
 80009b6:	2301      	movs	r3, #1
	}

}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_Init+0x28>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <HAL_Init+0x28>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f92b 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	200f      	movs	r0, #15
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fcf4 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40022000 	.word	0x40022000

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f935 	bl	8000c7a <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f90b 	bl	8000c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_IncTick+0x1c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_IncTick+0x20>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <HAL_IncTick+0x20>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	200001fc 	.word	0x200001fc

08000a70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b02      	ldr	r3, [pc, #8]	@ (8000a80 <HAL_GetTick+0x10>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	200001fc 	.word	0x200001fc

08000a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a8c:	f7ff fff0 	bl	8000a70 <HAL_GetTick>
 8000a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a9c:	d005      	beq.n	8000aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_Delay+0x44>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aaa:	bf00      	nop
 8000aac:	f7ff ffe0 	bl	8000a70 <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d8f7      	bhi.n	8000aac <HAL_Delay+0x28>
  {
  }
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	@ (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	@ 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	@ 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff90 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff49 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff5e 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff90 	bl	8000b84 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5f 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffb0 	bl	8000be8 <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b08b      	sub	sp, #44	@ 0x2c
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	e169      	b.n	8000f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	69fa      	ldr	r2, [r7, #28]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f040 8158 	bne.w	8000f76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	4a9a      	ldr	r2, [pc, #616]	@ (8000f34 <HAL_GPIO_Init+0x2a0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d05e      	beq.n	8000d8e <HAL_GPIO_Init+0xfa>
 8000cd0:	4a98      	ldr	r2, [pc, #608]	@ (8000f34 <HAL_GPIO_Init+0x2a0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d875      	bhi.n	8000dc2 <HAL_GPIO_Init+0x12e>
 8000cd6:	4a98      	ldr	r2, [pc, #608]	@ (8000f38 <HAL_GPIO_Init+0x2a4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d058      	beq.n	8000d8e <HAL_GPIO_Init+0xfa>
 8000cdc:	4a96      	ldr	r2, [pc, #600]	@ (8000f38 <HAL_GPIO_Init+0x2a4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d86f      	bhi.n	8000dc2 <HAL_GPIO_Init+0x12e>
 8000ce2:	4a96      	ldr	r2, [pc, #600]	@ (8000f3c <HAL_GPIO_Init+0x2a8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d052      	beq.n	8000d8e <HAL_GPIO_Init+0xfa>
 8000ce8:	4a94      	ldr	r2, [pc, #592]	@ (8000f3c <HAL_GPIO_Init+0x2a8>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d869      	bhi.n	8000dc2 <HAL_GPIO_Init+0x12e>
 8000cee:	4a94      	ldr	r2, [pc, #592]	@ (8000f40 <HAL_GPIO_Init+0x2ac>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d04c      	beq.n	8000d8e <HAL_GPIO_Init+0xfa>
 8000cf4:	4a92      	ldr	r2, [pc, #584]	@ (8000f40 <HAL_GPIO_Init+0x2ac>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d863      	bhi.n	8000dc2 <HAL_GPIO_Init+0x12e>
 8000cfa:	4a92      	ldr	r2, [pc, #584]	@ (8000f44 <HAL_GPIO_Init+0x2b0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d046      	beq.n	8000d8e <HAL_GPIO_Init+0xfa>
 8000d00:	4a90      	ldr	r2, [pc, #576]	@ (8000f44 <HAL_GPIO_Init+0x2b0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d85d      	bhi.n	8000dc2 <HAL_GPIO_Init+0x12e>
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d82a      	bhi.n	8000d60 <HAL_GPIO_Init+0xcc>
 8000d0a:	2b12      	cmp	r3, #18
 8000d0c:	d859      	bhi.n	8000dc2 <HAL_GPIO_Init+0x12e>
 8000d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d14 <HAL_GPIO_Init+0x80>)
 8000d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d14:	08000d8f 	.word	0x08000d8f
 8000d18:	08000d69 	.word	0x08000d69
 8000d1c:	08000d7b 	.word	0x08000d7b
 8000d20:	08000dbd 	.word	0x08000dbd
 8000d24:	08000dc3 	.word	0x08000dc3
 8000d28:	08000dc3 	.word	0x08000dc3
 8000d2c:	08000dc3 	.word	0x08000dc3
 8000d30:	08000dc3 	.word	0x08000dc3
 8000d34:	08000dc3 	.word	0x08000dc3
 8000d38:	08000dc3 	.word	0x08000dc3
 8000d3c:	08000dc3 	.word	0x08000dc3
 8000d40:	08000dc3 	.word	0x08000dc3
 8000d44:	08000dc3 	.word	0x08000dc3
 8000d48:	08000dc3 	.word	0x08000dc3
 8000d4c:	08000dc3 	.word	0x08000dc3
 8000d50:	08000dc3 	.word	0x08000dc3
 8000d54:	08000dc3 	.word	0x08000dc3
 8000d58:	08000d71 	.word	0x08000d71
 8000d5c:	08000d85 	.word	0x08000d85
 8000d60:	4a79      	ldr	r2, [pc, #484]	@ (8000f48 <HAL_GPIO_Init+0x2b4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d66:	e02c      	b.n	8000dc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e029      	b.n	8000dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	3304      	adds	r3, #4
 8000d76:	623b      	str	r3, [r7, #32]
          break;
 8000d78:	e024      	b.n	8000dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	3308      	adds	r3, #8
 8000d80:	623b      	str	r3, [r7, #32]
          break;
 8000d82:	e01f      	b.n	8000dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	330c      	adds	r3, #12
 8000d8a:	623b      	str	r3, [r7, #32]
          break;
 8000d8c:	e01a      	b.n	8000dc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d96:	2304      	movs	r3, #4
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e013      	b.n	8000dc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d105      	bne.n	8000db0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	611a      	str	r2, [r3, #16]
          break;
 8000dae:	e009      	b.n	8000dc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db0:	2308      	movs	r3, #8
 8000db2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	615a      	str	r2, [r3, #20]
          break;
 8000dba:	e003      	b.n	8000dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
          break;
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x130>
          break;
 8000dc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	2bff      	cmp	r3, #255	@ 0xff
 8000dc8:	d801      	bhi.n	8000dce <HAL_GPIO_Init+0x13a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	e001      	b.n	8000dd2 <HAL_GPIO_Init+0x13e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	2bff      	cmp	r3, #255	@ 0xff
 8000dd8:	d802      	bhi.n	8000de0 <HAL_GPIO_Init+0x14c>
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de2:	3b08      	subs	r3, #8
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	210f      	movs	r1, #15
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	6a39      	ldr	r1, [r7, #32]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	431a      	orrs	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80b1 	beq.w	8000f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e14:	4b4d      	ldr	r3, [pc, #308]	@ (8000f4c <HAL_GPIO_Init+0x2b8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a4c      	ldr	r2, [pc, #304]	@ (8000f4c <HAL_GPIO_Init+0x2b8>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b4a      	ldr	r3, [pc, #296]	@ (8000f4c <HAL_GPIO_Init+0x2b8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e2c:	4a48      	ldr	r2, [pc, #288]	@ (8000f50 <HAL_GPIO_Init+0x2bc>)
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a40      	ldr	r2, [pc, #256]	@ (8000f54 <HAL_GPIO_Init+0x2c0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d013      	beq.n	8000e80 <HAL_GPIO_Init+0x1ec>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d00d      	beq.n	8000e7c <HAL_GPIO_Init+0x1e8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a3e      	ldr	r2, [pc, #248]	@ (8000f5c <HAL_GPIO_Init+0x2c8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d007      	beq.n	8000e78 <HAL_GPIO_Init+0x1e4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f60 <HAL_GPIO_Init+0x2cc>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d101      	bne.n	8000e74 <HAL_GPIO_Init+0x1e0>
 8000e70:	2303      	movs	r3, #3
 8000e72:	e006      	b.n	8000e82 <HAL_GPIO_Init+0x1ee>
 8000e74:	2304      	movs	r3, #4
 8000e76:	e004      	b.n	8000e82 <HAL_GPIO_Init+0x1ee>
 8000e78:	2302      	movs	r3, #2
 8000e7a:	e002      	b.n	8000e82 <HAL_GPIO_Init+0x1ee>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <HAL_GPIO_Init+0x1ee>
 8000e80:	2300      	movs	r3, #0
 8000e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e84:	f002 0203 	and.w	r2, r2, #3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4093      	lsls	r3, r2
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e92:	492f      	ldr	r1, [pc, #188]	@ (8000f50 <HAL_GPIO_Init+0x2bc>)
 8000e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d006      	beq.n	8000eba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eac:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	492c      	ldr	r1, [pc, #176]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	608b      	str	r3, [r1, #8]
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eba:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	4928      	ldr	r1, [pc, #160]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ed4:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	4922      	ldr	r1, [pc, #136]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60cb      	str	r3, [r1, #12]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ee2:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	491e      	ldr	r1, [pc, #120]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000efc:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	4918      	ldr	r1, [pc, #96]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4914      	ldr	r1, [pc, #80]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d021      	beq.n	8000f68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	490e      	ldr	r1, [pc, #56]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
 8000f30:	e021      	b.n	8000f76 <HAL_GPIO_Init+0x2e2>
 8000f32:	bf00      	nop
 8000f34:	10320000 	.word	0x10320000
 8000f38:	10310000 	.word	0x10310000
 8000f3c:	10220000 	.word	0x10220000
 8000f40:	10210000 	.word	0x10210000
 8000f44:	10120000 	.word	0x10120000
 8000f48:	10110000 	.word	0x10110000
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	40011400 	.word	0x40011400
 8000f64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <HAL_GPIO_Init+0x304>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4909      	ldr	r1, [pc, #36]	@ (8000f98 <HAL_GPIO_Init+0x304>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f78:	3301      	adds	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f82:	fa22 f303 	lsr.w	r3, r2, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f47f ae8e 	bne.w	8000ca8 <HAL_GPIO_Init+0x14>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	372c      	adds	r7, #44	@ 0x2c
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e12b      	b.n	8001206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d106      	bne.n	8000fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fa32 	bl	800042c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2224      	movs	r2, #36	@ 0x24
 8000fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0201 	bic.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001000:	f000 fcda 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8001004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4a81      	ldr	r2, [pc, #516]	@ (8001210 <HAL_I2C_Init+0x274>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d807      	bhi.n	8001020 <HAL_I2C_Init+0x84>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4a80      	ldr	r2, [pc, #512]	@ (8001214 <HAL_I2C_Init+0x278>)
 8001014:	4293      	cmp	r3, r2
 8001016:	bf94      	ite	ls
 8001018:	2301      	movls	r3, #1
 800101a:	2300      	movhi	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	e006      	b.n	800102e <HAL_I2C_Init+0x92>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4a7d      	ldr	r2, [pc, #500]	@ (8001218 <HAL_I2C_Init+0x27c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	bf94      	ite	ls
 8001028:	2301      	movls	r3, #1
 800102a:	2300      	movhi	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e0e7      	b.n	8001206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4a78      	ldr	r2, [pc, #480]	@ (800121c <HAL_I2C_Init+0x280>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9b      	lsrs	r3, r3, #18
 8001040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	430a      	orrs	r2, r1
 8001054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a6a      	ldr	r2, [pc, #424]	@ (8001210 <HAL_I2C_Init+0x274>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d802      	bhi.n	8001070 <HAL_I2C_Init+0xd4>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3301      	adds	r3, #1
 800106e:	e009      	b.n	8001084 <HAL_I2C_Init+0xe8>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	4a69      	ldr	r2, [pc, #420]	@ (8001220 <HAL_I2C_Init+0x284>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	3301      	adds	r3, #1
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	430b      	orrs	r3, r1
 800108a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001096:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	495c      	ldr	r1, [pc, #368]	@ (8001210 <HAL_I2C_Init+0x274>)
 80010a0:	428b      	cmp	r3, r1
 80010a2:	d819      	bhi.n	80010d8 <HAL_I2C_Init+0x13c>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1e59      	subs	r1, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b2:	1c59      	adds	r1, r3, #1
 80010b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80010b8:	400b      	ands	r3, r1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <HAL_I2C_Init+0x138>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1e59      	subs	r1, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010cc:	3301      	adds	r3, #1
 80010ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d2:	e051      	b.n	8001178 <HAL_I2C_Init+0x1dc>
 80010d4:	2304      	movs	r3, #4
 80010d6:	e04f      	b.n	8001178 <HAL_I2C_Init+0x1dc>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d111      	bne.n	8001104 <HAL_I2C_Init+0x168>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1e58      	subs	r0, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6859      	ldr	r1, [r3, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	440b      	add	r3, r1
 80010ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f2:	3301      	adds	r3, #1
 80010f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	e012      	b.n	800112a <HAL_I2C_Init+0x18e>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1e58      	subs	r0, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6859      	ldr	r1, [r3, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	0099      	lsls	r1, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	fbb0 f3f3 	udiv	r3, r0, r3
 800111a:	3301      	adds	r3, #1
 800111c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Init+0x196>
 800112e:	2301      	movs	r3, #1
 8001130:	e022      	b.n	8001178 <HAL_I2C_Init+0x1dc>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10e      	bne.n	8001158 <HAL_I2C_Init+0x1bc>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1e58      	subs	r0, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6859      	ldr	r1, [r3, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	440b      	add	r3, r1
 8001148:	fbb0 f3f3 	udiv	r3, r0, r3
 800114c:	3301      	adds	r3, #1
 800114e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001156:	e00f      	b.n	8001178 <HAL_I2C_Init+0x1dc>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1e58      	subs	r0, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	0099      	lsls	r1, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	fbb0 f3f3 	udiv	r3, r0, r3
 800116e:	3301      	adds	r3, #1
 8001170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	6809      	ldr	r1, [r1, #0]
 800117c:	4313      	orrs	r3, r2
 800117e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69da      	ldr	r2, [r3, #28]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80011a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6911      	ldr	r1, [r2, #16]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68d2      	ldr	r2, [r2, #12]
 80011b2:	4311      	orrs	r1, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2220      	movs	r2, #32
 80011f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	000186a0 	.word	0x000186a0
 8001214:	001e847f 	.word	0x001e847f
 8001218:	003d08ff 	.word	0x003d08ff
 800121c:	431bde83 	.word	0x431bde83
 8001220:	10624dd3 	.word	0x10624dd3

08001224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e272      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 8087 	beq.w	8001352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001244:	4b92      	ldr	r3, [pc, #584]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b04      	cmp	r3, #4
 800124e:	d00c      	beq.n	800126a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001250:	4b8f      	ldr	r3, [pc, #572]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 030c 	and.w	r3, r3, #12
 8001258:	2b08      	cmp	r3, #8
 800125a:	d112      	bne.n	8001282 <HAL_RCC_OscConfig+0x5e>
 800125c:	4b8c      	ldr	r3, [pc, #560]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001268:	d10b      	bne.n	8001282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126a:	4b89      	ldr	r3, [pc, #548]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d06c      	beq.n	8001350 <HAL_RCC_OscConfig+0x12c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d168      	bne.n	8001350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e24c      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128a:	d106      	bne.n	800129a <HAL_RCC_OscConfig+0x76>
 800128c:	4b80      	ldr	r3, [pc, #512]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a7f      	ldr	r2, [pc, #508]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e02e      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x98>
 80012a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a7a      	ldr	r2, [pc, #488]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b78      	ldr	r3, [pc, #480]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a77      	ldr	r2, [pc, #476]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e01d      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0xbc>
 80012c6:	4b72      	ldr	r3, [pc, #456]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a71      	ldr	r2, [pc, #452]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 80012e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b68      	ldr	r3, [pc, #416]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a67      	ldr	r2, [pc, #412]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fbb6 	bl	8000a70 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fbb2 	bl	8000a70 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	@ 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e200      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0xe4>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fba2 	bl	8000a70 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fb9e 	bl	8000a70 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	@ 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e1ec      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x10c>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d063      	beq.n	8001426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800135e:	4b4c      	ldr	r3, [pc, #304]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800136a:	4b49      	ldr	r3, [pc, #292]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b08      	cmp	r3, #8
 8001374:	d11c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x18c>
 8001376:	4b46      	ldr	r3, [pc, #280]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x176>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e1c0      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b3d      	ldr	r3, [pc, #244]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4939      	ldr	r1, [pc, #228]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	e03a      	b.n	8001426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b8:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <HAL_RCC_OscConfig+0x270>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f7ff fb57 	bl	8000a70 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fb53 	bl	8000a70 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1a1      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4927      	ldr	r1, [pc, #156]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <HAL_RCC_OscConfig+0x270>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb36 	bl	8000a70 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fb32 	bl	8000a70 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e180      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d03a      	beq.n	80014a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d019      	beq.n	800146e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_RCC_OscConfig+0x274>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fb16 	bl	8000a70 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fb12 	bl	8000a70 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e160      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <HAL_RCC_OscConfig+0x26c>)
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f000 face 	bl	8001a08 <RCC_Delay>
 800146c:	e01c      	b.n	80014a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_RCC_OscConfig+0x274>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fafc 	bl	8000a70 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	e00f      	b.n	800149c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff faf8 	bl	8000a70 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d908      	bls.n	800149c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e146      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000
 8001494:	42420000 	.word	0x42420000
 8001498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b92      	ldr	r3, [pc, #584]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e9      	bne.n	800147c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a6 	beq.w	8001602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b8b      	ldr	r3, [pc, #556]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10d      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b88      	ldr	r3, [pc, #544]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a87      	ldr	r2, [pc, #540]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b85      	ldr	r3, [pc, #532]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b82      	ldr	r3, [pc, #520]	@ (80016ec <HAL_RCC_OscConfig+0x4c8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b7f      	ldr	r3, [pc, #508]	@ (80016ec <HAL_RCC_OscConfig+0x4c8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7e      	ldr	r2, [pc, #504]	@ (80016ec <HAL_RCC_OscConfig+0x4c8>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fab9 	bl	8000a70 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fab5 	bl	8000a70 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	@ 0x64
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e103      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b75      	ldr	r3, [pc, #468]	@ (80016ec <HAL_RCC_OscConfig+0x4c8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x312>
 8001528:	4b6f      	ldr	r3, [pc, #444]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a6e      	ldr	r2, [pc, #440]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	e02d      	b.n	8001592 <HAL_RCC_OscConfig+0x36e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x334>
 800153e:	4b6a      	ldr	r3, [pc, #424]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a69      	ldr	r2, [pc, #420]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	4b67      	ldr	r3, [pc, #412]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4a66      	ldr	r2, [pc, #408]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6213      	str	r3, [r2, #32]
 8001556:	e01c      	b.n	8001592 <HAL_RCC_OscConfig+0x36e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b05      	cmp	r3, #5
 800155e:	d10c      	bne.n	800157a <HAL_RCC_OscConfig+0x356>
 8001560:	4b61      	ldr	r3, [pc, #388]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a60      	ldr	r2, [pc, #384]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	4b5e      	ldr	r3, [pc, #376]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4a5d      	ldr	r2, [pc, #372]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6213      	str	r3, [r2, #32]
 8001578:	e00b      	b.n	8001592 <HAL_RCC_OscConfig+0x36e>
 800157a:	4b5b      	ldr	r3, [pc, #364]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a5a      	ldr	r2, [pc, #360]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	4b58      	ldr	r3, [pc, #352]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a57      	ldr	r2, [pc, #348]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f023 0304 	bic.w	r3, r3, #4
 8001590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d015      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fa69 	bl	8000a70 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fa65 	bl	8000a70 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e0b1      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	4b4b      	ldr	r3, [pc, #300]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0ee      	beq.n	80015a2 <HAL_RCC_OscConfig+0x37e>
 80015c4:	e014      	b.n	80015f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fa53 	bl	8000a70 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fa4f 	bl	8000a70 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e09b      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	4b40      	ldr	r3, [pc, #256]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ee      	bne.n	80015ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d105      	bne.n	8001602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f6:	4b3c      	ldr	r3, [pc, #240]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a3b      	ldr	r2, [pc, #236]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8087 	beq.w	800171a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800160c:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d061      	beq.n	80016dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d146      	bne.n	80016ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001620:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <HAL_RCC_OscConfig+0x4cc>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fa23 	bl	8000a70 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fa1f 	bl	8000a70 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e06d      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001640:	4b29      	ldr	r3, [pc, #164]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4921      	ldr	r1, [pc, #132]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a19      	ldr	r1, [r3, #32]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	430b      	orrs	r3, r1
 800167a:	491b      	ldr	r1, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <HAL_RCC_OscConfig+0x4cc>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff f9f3 	bl	8000a70 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff f9ef 	bl	8000a70 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e03d      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x46a>
 80016ac:	e035      	b.n	800171a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_RCC_OscConfig+0x4cc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff f9dc 	bl	8000a70 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff f9d8 	bl	8000a70 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e026      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x498>
 80016da:	e01e      	b.n	800171a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e019      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
 80016f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_RCC_OscConfig+0x500>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	429a      	cmp	r2, r3
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d001      	beq.n	800171a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0d0      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b6a      	ldr	r3, [pc, #424]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d910      	bls.n	800176c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b67      	ldr	r3, [pc, #412]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0207 	bic.w	r2, r3, #7
 8001752:	4965      	ldr	r1, [pc, #404]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a58      	ldr	r2, [pc, #352]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800178e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a52      	ldr	r2, [pc, #328]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d040      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d115      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e073      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06b      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b39      	ldr	r3, [pc, #228]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4936      	ldr	r1, [pc, #216]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff f92a 	bl	8000a70 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff f926 	bl	8000a70 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e053      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d210      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 0207 	bic.w	r2, r3, #7
 800185e:	4922      	ldr	r1, [pc, #136]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1cc>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1d0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f888 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	080027a8 	.word	0x080027a8
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x94>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x30>
 8001926:	2b08      	cmp	r3, #8
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x36>
 800192a:	e027      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800192e:	613b      	str	r3, [r7, #16]
      break;
 8001930:	e027      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0c9b      	lsrs	r3, r3, #18
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x9c>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d010      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x94>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	0c5b      	lsrs	r3, r3, #17
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800195e:	fb03 f202 	mul.w	r2, r3, r2
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e004      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	613b      	str	r3, [r7, #16]
      break;
 800197a:	e002      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800197e:	613b      	str	r3, [r7, #16]
      break;
 8001980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001982:	693b      	ldr	r3, [r7, #16]
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	007a1200 	.word	0x007a1200
 8001998:	080027c0 	.word	0x080027c0
 800199c:	080027d0 	.word	0x080027d0
 80019a0:	003d0900 	.word	0x003d0900

080019a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff2 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	@ (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	080027b8 	.word	0x080027b8

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	0adb      	lsrs	r3, r3, #11
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	@ (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	080027b8 	.word	0x080027b8

08001a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <RCC_Delay+0x34>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <RCC_Delay+0x38>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0a5b      	lsrs	r3, r3, #9
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a24:	bf00      	nop
  }
  while (Delay --);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	60fa      	str	r2, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <RCC_Delay+0x1c>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e042      	b.n	8001adc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fd1c 	bl	80004a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	@ 0x24
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f91d 	bl	8001cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d16d      	bne.n	8001be0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_UART_Transmit+0x2c>
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e066      	b.n	8001be2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2221      	movs	r2, #33	@ 0x21
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b22:	f7fe ffa5 	bl	8000a70 <HAL_GetTick>
 8001b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	88fa      	ldrh	r2, [r7, #6]
 8001b2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b3c:	d108      	bne.n	8001b50 <HAL_UART_Transmit+0x6c>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d104      	bne.n	8001b50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	e003      	b.n	8001b58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b58:	e02a      	b.n	8001bb0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2200      	movs	r2, #0
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f840 	bl	8001bea <UART_WaitOnFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e036      	b.n	8001be2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10b      	bne.n	8001b92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e007      	b.n	8001ba2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1cf      	bne.n	8001b5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2140      	movs	r1, #64	@ 0x40
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f810 	bl	8001bea <UART_WaitOnFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e006      	b.n	8001be2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b090      	sub	sp, #64	@ 0x40
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bfa:	e050      	b.n	8001c9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c02:	d04c      	beq.n	8001c9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <UART_WaitOnFlagUntilTimeout+0x30>
 8001c0a:	f7fe ff31 	bl	8000a70 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d241      	bcs.n	8001c9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	330c      	adds	r3, #12
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c24:	e853 3f00 	ldrex	r3, [r3]
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	330c      	adds	r3, #12
 8001c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c3a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c42:	e841 2300 	strex	r3, r2, [r1]
 8001c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1e5      	bne.n	8001c1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3314      	adds	r3, #20
 8001c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	e853 3f00 	ldrex	r3, [r3]
 8001c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3314      	adds	r3, #20
 8001c6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c6e:	623a      	str	r2, [r7, #32]
 8001c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c72:	69f9      	ldr	r1, [r7, #28]
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	e841 2300 	strex	r3, r2, [r1]
 8001c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1e5      	bne.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e00f      	b.n	8001cbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	bf0c      	ite	eq
 8001cae:	2301      	moveq	r3, #1
 8001cb0:	2300      	movne	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d09f      	beq.n	8001bfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3740      	adds	r7, #64	@ 0x40
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001d02:	f023 030c 	bic.w	r3, r3, #12
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ddc <UART_SetConfig+0x114>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d103      	bne.n	8001d38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d30:	f7ff fe56 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	e002      	b.n	8001d3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d38:	f7ff fe3e 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009a      	lsls	r2, r3, #2
 8001d48:	441a      	add	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	4a22      	ldr	r2, [pc, #136]	@ (8001de0 <UART_SetConfig+0x118>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	0119      	lsls	r1, r3, #4
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <UART_SetConfig+0x118>)
 8001d76:	fba3 0302 	umull	r0, r3, r3, r2
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2064      	movs	r0, #100	@ 0x64
 8001d7e:	fb00 f303 	mul.w	r3, r0, r3
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	3332      	adds	r3, #50	@ 0x32
 8001d88:	4a15      	ldr	r2, [pc, #84]	@ (8001de0 <UART_SetConfig+0x118>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d94:	4419      	add	r1, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009a      	lsls	r2, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <UART_SetConfig+0x118>)
 8001dae:	fba3 0302 	umull	r0, r3, r3, r2
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2064      	movs	r0, #100	@ 0x64
 8001db6:	fb00 f303 	mul.w	r3, r0, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	3332      	adds	r3, #50	@ 0x32
 8001dc0:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <UART_SetConfig+0x118>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	440a      	add	r2, r1
 8001dd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	51eb851f 	.word	0x51eb851f

08001de4 <siprintf>:
 8001de4:	b40e      	push	{r1, r2, r3}
 8001de6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001dea:	b500      	push	{lr}
 8001dec:	b09c      	sub	sp, #112	@ 0x70
 8001dee:	ab1d      	add	r3, sp, #116	@ 0x74
 8001df0:	9002      	str	r0, [sp, #8]
 8001df2:	9006      	str	r0, [sp, #24]
 8001df4:	9107      	str	r1, [sp, #28]
 8001df6:	9104      	str	r1, [sp, #16]
 8001df8:	4808      	ldr	r0, [pc, #32]	@ (8001e1c <siprintf+0x38>)
 8001dfa:	4909      	ldr	r1, [pc, #36]	@ (8001e20 <siprintf+0x3c>)
 8001dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e00:	9105      	str	r1, [sp, #20]
 8001e02:	6800      	ldr	r0, [r0, #0]
 8001e04:	a902      	add	r1, sp, #8
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	f000 f992 	bl	8002130 <_svfiprintf_r>
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	9b02      	ldr	r3, [sp, #8]
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	b01c      	add	sp, #112	@ 0x70
 8001e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e18:	b003      	add	sp, #12
 8001e1a:	4770      	bx	lr
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	ffff0208 	.word	0xffff0208

08001e24 <memset>:
 8001e24:	4603      	mov	r3, r0
 8001e26:	4402      	add	r2, r0
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d100      	bne.n	8001e2e <memset+0xa>
 8001e2c:	4770      	bx	lr
 8001e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e32:	e7f9      	b.n	8001e28 <memset+0x4>

08001e34 <__errno>:
 8001e34:	4b01      	ldr	r3, [pc, #4]	@ (8001e3c <__errno+0x8>)
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <__libc_init_array>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	2600      	movs	r6, #0
 8001e44:	4d0c      	ldr	r5, [pc, #48]	@ (8001e78 <__libc_init_array+0x38>)
 8001e46:	4c0d      	ldr	r4, [pc, #52]	@ (8001e7c <__libc_init_array+0x3c>)
 8001e48:	1b64      	subs	r4, r4, r5
 8001e4a:	10a4      	asrs	r4, r4, #2
 8001e4c:	42a6      	cmp	r6, r4
 8001e4e:	d109      	bne.n	8001e64 <__libc_init_array+0x24>
 8001e50:	f000 fc78 	bl	8002744 <_init>
 8001e54:	2600      	movs	r6, #0
 8001e56:	4d0a      	ldr	r5, [pc, #40]	@ (8001e80 <__libc_init_array+0x40>)
 8001e58:	4c0a      	ldr	r4, [pc, #40]	@ (8001e84 <__libc_init_array+0x44>)
 8001e5a:	1b64      	subs	r4, r4, r5
 8001e5c:	10a4      	asrs	r4, r4, #2
 8001e5e:	42a6      	cmp	r6, r4
 8001e60:	d105      	bne.n	8001e6e <__libc_init_array+0x2e>
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e68:	4798      	blx	r3
 8001e6a:	3601      	adds	r6, #1
 8001e6c:	e7ee      	b.n	8001e4c <__libc_init_array+0xc>
 8001e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e72:	4798      	blx	r3
 8001e74:	3601      	adds	r6, #1
 8001e76:	e7f2      	b.n	8001e5e <__libc_init_array+0x1e>
 8001e78:	08002810 	.word	0x08002810
 8001e7c:	08002810 	.word	0x08002810
 8001e80:	08002810 	.word	0x08002810
 8001e84:	08002814 	.word	0x08002814

08001e88 <__retarget_lock_acquire_recursive>:
 8001e88:	4770      	bx	lr

08001e8a <__retarget_lock_release_recursive>:
 8001e8a:	4770      	bx	lr

08001e8c <_free_r>:
 8001e8c:	b538      	push	{r3, r4, r5, lr}
 8001e8e:	4605      	mov	r5, r0
 8001e90:	2900      	cmp	r1, #0
 8001e92:	d040      	beq.n	8001f16 <_free_r+0x8a>
 8001e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e98:	1f0c      	subs	r4, r1, #4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bfb8      	it	lt
 8001e9e:	18e4      	addlt	r4, r4, r3
 8001ea0:	f000 f8de 	bl	8002060 <__malloc_lock>
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <_free_r+0x8c>)
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	b933      	cbnz	r3, 8001eb8 <_free_r+0x2c>
 8001eaa:	6063      	str	r3, [r4, #4]
 8001eac:	6014      	str	r4, [r2, #0]
 8001eae:	4628      	mov	r0, r5
 8001eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eb4:	f000 b8da 	b.w	800206c <__malloc_unlock>
 8001eb8:	42a3      	cmp	r3, r4
 8001eba:	d908      	bls.n	8001ece <_free_r+0x42>
 8001ebc:	6820      	ldr	r0, [r4, #0]
 8001ebe:	1821      	adds	r1, r4, r0
 8001ec0:	428b      	cmp	r3, r1
 8001ec2:	bf01      	itttt	eq
 8001ec4:	6819      	ldreq	r1, [r3, #0]
 8001ec6:	685b      	ldreq	r3, [r3, #4]
 8001ec8:	1809      	addeq	r1, r1, r0
 8001eca:	6021      	streq	r1, [r4, #0]
 8001ecc:	e7ed      	b.n	8001eaa <_free_r+0x1e>
 8001ece:	461a      	mov	r2, r3
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	b10b      	cbz	r3, 8001ed8 <_free_r+0x4c>
 8001ed4:	42a3      	cmp	r3, r4
 8001ed6:	d9fa      	bls.n	8001ece <_free_r+0x42>
 8001ed8:	6811      	ldr	r1, [r2, #0]
 8001eda:	1850      	adds	r0, r2, r1
 8001edc:	42a0      	cmp	r0, r4
 8001ede:	d10b      	bne.n	8001ef8 <_free_r+0x6c>
 8001ee0:	6820      	ldr	r0, [r4, #0]
 8001ee2:	4401      	add	r1, r0
 8001ee4:	1850      	adds	r0, r2, r1
 8001ee6:	4283      	cmp	r3, r0
 8001ee8:	6011      	str	r1, [r2, #0]
 8001eea:	d1e0      	bne.n	8001eae <_free_r+0x22>
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4408      	add	r0, r1
 8001ef2:	6010      	str	r0, [r2, #0]
 8001ef4:	6053      	str	r3, [r2, #4]
 8001ef6:	e7da      	b.n	8001eae <_free_r+0x22>
 8001ef8:	d902      	bls.n	8001f00 <_free_r+0x74>
 8001efa:	230c      	movs	r3, #12
 8001efc:	602b      	str	r3, [r5, #0]
 8001efe:	e7d6      	b.n	8001eae <_free_r+0x22>
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	1821      	adds	r1, r4, r0
 8001f04:	428b      	cmp	r3, r1
 8001f06:	bf01      	itttt	eq
 8001f08:	6819      	ldreq	r1, [r3, #0]
 8001f0a:	685b      	ldreq	r3, [r3, #4]
 8001f0c:	1809      	addeq	r1, r1, r0
 8001f0e:	6021      	streq	r1, [r4, #0]
 8001f10:	6063      	str	r3, [r4, #4]
 8001f12:	6054      	str	r4, [r2, #4]
 8001f14:	e7cb      	b.n	8001eae <_free_r+0x22>
 8001f16:	bd38      	pop	{r3, r4, r5, pc}
 8001f18:	20000344 	.word	0x20000344

08001f1c <sbrk_aligned>:
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8001f5c <sbrk_aligned+0x40>)
 8001f20:	460c      	mov	r4, r1
 8001f22:	6831      	ldr	r1, [r6, #0]
 8001f24:	4605      	mov	r5, r0
 8001f26:	b911      	cbnz	r1, 8001f2e <sbrk_aligned+0x12>
 8001f28:	f000 fbaa 	bl	8002680 <_sbrk_r>
 8001f2c:	6030      	str	r0, [r6, #0]
 8001f2e:	4621      	mov	r1, r4
 8001f30:	4628      	mov	r0, r5
 8001f32:	f000 fba5 	bl	8002680 <_sbrk_r>
 8001f36:	1c43      	adds	r3, r0, #1
 8001f38:	d103      	bne.n	8001f42 <sbrk_aligned+0x26>
 8001f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8001f3e:	4620      	mov	r0, r4
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	1cc4      	adds	r4, r0, #3
 8001f44:	f024 0403 	bic.w	r4, r4, #3
 8001f48:	42a0      	cmp	r0, r4
 8001f4a:	d0f8      	beq.n	8001f3e <sbrk_aligned+0x22>
 8001f4c:	1a21      	subs	r1, r4, r0
 8001f4e:	4628      	mov	r0, r5
 8001f50:	f000 fb96 	bl	8002680 <_sbrk_r>
 8001f54:	3001      	adds	r0, #1
 8001f56:	d1f2      	bne.n	8001f3e <sbrk_aligned+0x22>
 8001f58:	e7ef      	b.n	8001f3a <sbrk_aligned+0x1e>
 8001f5a:	bf00      	nop
 8001f5c:	20000340 	.word	0x20000340

08001f60 <_malloc_r>:
 8001f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f64:	1ccd      	adds	r5, r1, #3
 8001f66:	f025 0503 	bic.w	r5, r5, #3
 8001f6a:	3508      	adds	r5, #8
 8001f6c:	2d0c      	cmp	r5, #12
 8001f6e:	bf38      	it	cc
 8001f70:	250c      	movcc	r5, #12
 8001f72:	2d00      	cmp	r5, #0
 8001f74:	4606      	mov	r6, r0
 8001f76:	db01      	blt.n	8001f7c <_malloc_r+0x1c>
 8001f78:	42a9      	cmp	r1, r5
 8001f7a:	d904      	bls.n	8001f86 <_malloc_r+0x26>
 8001f7c:	230c      	movs	r3, #12
 8001f7e:	6033      	str	r3, [r6, #0]
 8001f80:	2000      	movs	r0, #0
 8001f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800205c <_malloc_r+0xfc>
 8001f8a:	f000 f869 	bl	8002060 <__malloc_lock>
 8001f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8001f92:	461c      	mov	r4, r3
 8001f94:	bb44      	cbnz	r4, 8001fe8 <_malloc_r+0x88>
 8001f96:	4629      	mov	r1, r5
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f7ff ffbf 	bl	8001f1c <sbrk_aligned>
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	d158      	bne.n	8002056 <_malloc_r+0xf6>
 8001fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8001fa8:	4627      	mov	r7, r4
 8001faa:	2f00      	cmp	r7, #0
 8001fac:	d143      	bne.n	8002036 <_malloc_r+0xd6>
 8001fae:	2c00      	cmp	r4, #0
 8001fb0:	d04b      	beq.n	800204a <_malloc_r+0xea>
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	4639      	mov	r1, r7
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	eb04 0903 	add.w	r9, r4, r3
 8001fbc:	f000 fb60 	bl	8002680 <_sbrk_r>
 8001fc0:	4581      	cmp	r9, r0
 8001fc2:	d142      	bne.n	800204a <_malloc_r+0xea>
 8001fc4:	6821      	ldr	r1, [r4, #0]
 8001fc6:	4630      	mov	r0, r6
 8001fc8:	1a6d      	subs	r5, r5, r1
 8001fca:	4629      	mov	r1, r5
 8001fcc:	f7ff ffa6 	bl	8001f1c <sbrk_aligned>
 8001fd0:	3001      	adds	r0, #1
 8001fd2:	d03a      	beq.n	800204a <_malloc_r+0xea>
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	442b      	add	r3, r5
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	f8d8 3000 	ldr.w	r3, [r8]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	bb62      	cbnz	r2, 800203c <_malloc_r+0xdc>
 8001fe2:	f8c8 7000 	str.w	r7, [r8]
 8001fe6:	e00f      	b.n	8002008 <_malloc_r+0xa8>
 8001fe8:	6822      	ldr	r2, [r4, #0]
 8001fea:	1b52      	subs	r2, r2, r5
 8001fec:	d420      	bmi.n	8002030 <_malloc_r+0xd0>
 8001fee:	2a0b      	cmp	r2, #11
 8001ff0:	d917      	bls.n	8002022 <_malloc_r+0xc2>
 8001ff2:	1961      	adds	r1, r4, r5
 8001ff4:	42a3      	cmp	r3, r4
 8001ff6:	6025      	str	r5, [r4, #0]
 8001ff8:	bf18      	it	ne
 8001ffa:	6059      	strne	r1, [r3, #4]
 8001ffc:	6863      	ldr	r3, [r4, #4]
 8001ffe:	bf08      	it	eq
 8002000:	f8c8 1000 	streq.w	r1, [r8]
 8002004:	5162      	str	r2, [r4, r5]
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	4630      	mov	r0, r6
 800200a:	f000 f82f 	bl	800206c <__malloc_unlock>
 800200e:	f104 000b 	add.w	r0, r4, #11
 8002012:	1d23      	adds	r3, r4, #4
 8002014:	f020 0007 	bic.w	r0, r0, #7
 8002018:	1ac2      	subs	r2, r0, r3
 800201a:	bf1c      	itt	ne
 800201c:	1a1b      	subne	r3, r3, r0
 800201e:	50a3      	strne	r3, [r4, r2]
 8002020:	e7af      	b.n	8001f82 <_malloc_r+0x22>
 8002022:	6862      	ldr	r2, [r4, #4]
 8002024:	42a3      	cmp	r3, r4
 8002026:	bf0c      	ite	eq
 8002028:	f8c8 2000 	streq.w	r2, [r8]
 800202c:	605a      	strne	r2, [r3, #4]
 800202e:	e7eb      	b.n	8002008 <_malloc_r+0xa8>
 8002030:	4623      	mov	r3, r4
 8002032:	6864      	ldr	r4, [r4, #4]
 8002034:	e7ae      	b.n	8001f94 <_malloc_r+0x34>
 8002036:	463c      	mov	r4, r7
 8002038:	687f      	ldr	r7, [r7, #4]
 800203a:	e7b6      	b.n	8001faa <_malloc_r+0x4a>
 800203c:	461a      	mov	r2, r3
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	42a3      	cmp	r3, r4
 8002042:	d1fb      	bne.n	800203c <_malloc_r+0xdc>
 8002044:	2300      	movs	r3, #0
 8002046:	6053      	str	r3, [r2, #4]
 8002048:	e7de      	b.n	8002008 <_malloc_r+0xa8>
 800204a:	230c      	movs	r3, #12
 800204c:	4630      	mov	r0, r6
 800204e:	6033      	str	r3, [r6, #0]
 8002050:	f000 f80c 	bl	800206c <__malloc_unlock>
 8002054:	e794      	b.n	8001f80 <_malloc_r+0x20>
 8002056:	6005      	str	r5, [r0, #0]
 8002058:	e7d6      	b.n	8002008 <_malloc_r+0xa8>
 800205a:	bf00      	nop
 800205c:	20000344 	.word	0x20000344

08002060 <__malloc_lock>:
 8002060:	4801      	ldr	r0, [pc, #4]	@ (8002068 <__malloc_lock+0x8>)
 8002062:	f7ff bf11 	b.w	8001e88 <__retarget_lock_acquire_recursive>
 8002066:	bf00      	nop
 8002068:	2000033c 	.word	0x2000033c

0800206c <__malloc_unlock>:
 800206c:	4801      	ldr	r0, [pc, #4]	@ (8002074 <__malloc_unlock+0x8>)
 800206e:	f7ff bf0c 	b.w	8001e8a <__retarget_lock_release_recursive>
 8002072:	bf00      	nop
 8002074:	2000033c 	.word	0x2000033c

08002078 <__ssputs_r>:
 8002078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800207c:	461f      	mov	r7, r3
 800207e:	688e      	ldr	r6, [r1, #8]
 8002080:	4682      	mov	sl, r0
 8002082:	42be      	cmp	r6, r7
 8002084:	460c      	mov	r4, r1
 8002086:	4690      	mov	r8, r2
 8002088:	680b      	ldr	r3, [r1, #0]
 800208a:	d82d      	bhi.n	80020e8 <__ssputs_r+0x70>
 800208c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002090:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002094:	d026      	beq.n	80020e4 <__ssputs_r+0x6c>
 8002096:	6965      	ldr	r5, [r4, #20]
 8002098:	6909      	ldr	r1, [r1, #16]
 800209a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800209e:	eba3 0901 	sub.w	r9, r3, r1
 80020a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80020a6:	1c7b      	adds	r3, r7, #1
 80020a8:	444b      	add	r3, r9
 80020aa:	106d      	asrs	r5, r5, #1
 80020ac:	429d      	cmp	r5, r3
 80020ae:	bf38      	it	cc
 80020b0:	461d      	movcc	r5, r3
 80020b2:	0553      	lsls	r3, r2, #21
 80020b4:	d527      	bpl.n	8002106 <__ssputs_r+0x8e>
 80020b6:	4629      	mov	r1, r5
 80020b8:	f7ff ff52 	bl	8001f60 <_malloc_r>
 80020bc:	4606      	mov	r6, r0
 80020be:	b360      	cbz	r0, 800211a <__ssputs_r+0xa2>
 80020c0:	464a      	mov	r2, r9
 80020c2:	6921      	ldr	r1, [r4, #16]
 80020c4:	f000 fafa 	bl	80026bc <memcpy>
 80020c8:	89a3      	ldrh	r3, [r4, #12]
 80020ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80020ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d2:	81a3      	strh	r3, [r4, #12]
 80020d4:	6126      	str	r6, [r4, #16]
 80020d6:	444e      	add	r6, r9
 80020d8:	6026      	str	r6, [r4, #0]
 80020da:	463e      	mov	r6, r7
 80020dc:	6165      	str	r5, [r4, #20]
 80020de:	eba5 0509 	sub.w	r5, r5, r9
 80020e2:	60a5      	str	r5, [r4, #8]
 80020e4:	42be      	cmp	r6, r7
 80020e6:	d900      	bls.n	80020ea <__ssputs_r+0x72>
 80020e8:	463e      	mov	r6, r7
 80020ea:	4632      	mov	r2, r6
 80020ec:	4641      	mov	r1, r8
 80020ee:	6820      	ldr	r0, [r4, #0]
 80020f0:	f000 faac 	bl	800264c <memmove>
 80020f4:	2000      	movs	r0, #0
 80020f6:	68a3      	ldr	r3, [r4, #8]
 80020f8:	1b9b      	subs	r3, r3, r6
 80020fa:	60a3      	str	r3, [r4, #8]
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	4433      	add	r3, r6
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002106:	462a      	mov	r2, r5
 8002108:	f000 fae6 	bl	80026d8 <_realloc_r>
 800210c:	4606      	mov	r6, r0
 800210e:	2800      	cmp	r0, #0
 8002110:	d1e0      	bne.n	80020d4 <__ssputs_r+0x5c>
 8002112:	4650      	mov	r0, sl
 8002114:	6921      	ldr	r1, [r4, #16]
 8002116:	f7ff feb9 	bl	8001e8c <_free_r>
 800211a:	230c      	movs	r3, #12
 800211c:	f8ca 3000 	str.w	r3, [sl]
 8002120:	89a3      	ldrh	r3, [r4, #12]
 8002122:	f04f 30ff 	mov.w	r0, #4294967295
 8002126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800212a:	81a3      	strh	r3, [r4, #12]
 800212c:	e7e9      	b.n	8002102 <__ssputs_r+0x8a>
	...

08002130 <_svfiprintf_r>:
 8002130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002134:	4698      	mov	r8, r3
 8002136:	898b      	ldrh	r3, [r1, #12]
 8002138:	4607      	mov	r7, r0
 800213a:	061b      	lsls	r3, r3, #24
 800213c:	460d      	mov	r5, r1
 800213e:	4614      	mov	r4, r2
 8002140:	b09d      	sub	sp, #116	@ 0x74
 8002142:	d510      	bpl.n	8002166 <_svfiprintf_r+0x36>
 8002144:	690b      	ldr	r3, [r1, #16]
 8002146:	b973      	cbnz	r3, 8002166 <_svfiprintf_r+0x36>
 8002148:	2140      	movs	r1, #64	@ 0x40
 800214a:	f7ff ff09 	bl	8001f60 <_malloc_r>
 800214e:	6028      	str	r0, [r5, #0]
 8002150:	6128      	str	r0, [r5, #16]
 8002152:	b930      	cbnz	r0, 8002162 <_svfiprintf_r+0x32>
 8002154:	230c      	movs	r3, #12
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	b01d      	add	sp, #116	@ 0x74
 800215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002162:	2340      	movs	r3, #64	@ 0x40
 8002164:	616b      	str	r3, [r5, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	9309      	str	r3, [sp, #36]	@ 0x24
 800216a:	2320      	movs	r3, #32
 800216c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002170:	2330      	movs	r3, #48	@ 0x30
 8002172:	f04f 0901 	mov.w	r9, #1
 8002176:	f8cd 800c 	str.w	r8, [sp, #12]
 800217a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002314 <_svfiprintf_r+0x1e4>
 800217e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002182:	4623      	mov	r3, r4
 8002184:	469a      	mov	sl, r3
 8002186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800218a:	b10a      	cbz	r2, 8002190 <_svfiprintf_r+0x60>
 800218c:	2a25      	cmp	r2, #37	@ 0x25
 800218e:	d1f9      	bne.n	8002184 <_svfiprintf_r+0x54>
 8002190:	ebba 0b04 	subs.w	fp, sl, r4
 8002194:	d00b      	beq.n	80021ae <_svfiprintf_r+0x7e>
 8002196:	465b      	mov	r3, fp
 8002198:	4622      	mov	r2, r4
 800219a:	4629      	mov	r1, r5
 800219c:	4638      	mov	r0, r7
 800219e:	f7ff ff6b 	bl	8002078 <__ssputs_r>
 80021a2:	3001      	adds	r0, #1
 80021a4:	f000 80a7 	beq.w	80022f6 <_svfiprintf_r+0x1c6>
 80021a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80021aa:	445a      	add	r2, fp
 80021ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80021ae:	f89a 3000 	ldrb.w	r3, [sl]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 809f 	beq.w	80022f6 <_svfiprintf_r+0x1c6>
 80021b8:	2300      	movs	r3, #0
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295
 80021be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021c2:	f10a 0a01 	add.w	sl, sl, #1
 80021c6:	9304      	str	r3, [sp, #16]
 80021c8:	9307      	str	r3, [sp, #28]
 80021ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80021ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80021d0:	4654      	mov	r4, sl
 80021d2:	2205      	movs	r2, #5
 80021d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021d8:	484e      	ldr	r0, [pc, #312]	@ (8002314 <_svfiprintf_r+0x1e4>)
 80021da:	f000 fa61 	bl	80026a0 <memchr>
 80021de:	9a04      	ldr	r2, [sp, #16]
 80021e0:	b9d8      	cbnz	r0, 800221a <_svfiprintf_r+0xea>
 80021e2:	06d0      	lsls	r0, r2, #27
 80021e4:	bf44      	itt	mi
 80021e6:	2320      	movmi	r3, #32
 80021e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021ec:	0711      	lsls	r1, r2, #28
 80021ee:	bf44      	itt	mi
 80021f0:	232b      	movmi	r3, #43	@ 0x2b
 80021f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021f6:	f89a 3000 	ldrb.w	r3, [sl]
 80021fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80021fc:	d015      	beq.n	800222a <_svfiprintf_r+0xfa>
 80021fe:	4654      	mov	r4, sl
 8002200:	2000      	movs	r0, #0
 8002202:	f04f 0c0a 	mov.w	ip, #10
 8002206:	9a07      	ldr	r2, [sp, #28]
 8002208:	4621      	mov	r1, r4
 800220a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800220e:	3b30      	subs	r3, #48	@ 0x30
 8002210:	2b09      	cmp	r3, #9
 8002212:	d94b      	bls.n	80022ac <_svfiprintf_r+0x17c>
 8002214:	b1b0      	cbz	r0, 8002244 <_svfiprintf_r+0x114>
 8002216:	9207      	str	r2, [sp, #28]
 8002218:	e014      	b.n	8002244 <_svfiprintf_r+0x114>
 800221a:	eba0 0308 	sub.w	r3, r0, r8
 800221e:	fa09 f303 	lsl.w	r3, r9, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	46a2      	mov	sl, r4
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	e7d2      	b.n	80021d0 <_svfiprintf_r+0xa0>
 800222a:	9b03      	ldr	r3, [sp, #12]
 800222c:	1d19      	adds	r1, r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	9103      	str	r1, [sp, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	bfbb      	ittet	lt
 8002236:	425b      	neglt	r3, r3
 8002238:	f042 0202 	orrlt.w	r2, r2, #2
 800223c:	9307      	strge	r3, [sp, #28]
 800223e:	9307      	strlt	r3, [sp, #28]
 8002240:	bfb8      	it	lt
 8002242:	9204      	strlt	r2, [sp, #16]
 8002244:	7823      	ldrb	r3, [r4, #0]
 8002246:	2b2e      	cmp	r3, #46	@ 0x2e
 8002248:	d10a      	bne.n	8002260 <_svfiprintf_r+0x130>
 800224a:	7863      	ldrb	r3, [r4, #1]
 800224c:	2b2a      	cmp	r3, #42	@ 0x2a
 800224e:	d132      	bne.n	80022b6 <_svfiprintf_r+0x186>
 8002250:	9b03      	ldr	r3, [sp, #12]
 8002252:	3402      	adds	r4, #2
 8002254:	1d1a      	adds	r2, r3, #4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	9203      	str	r2, [sp, #12]
 800225a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800225e:	9305      	str	r3, [sp, #20]
 8002260:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002318 <_svfiprintf_r+0x1e8>
 8002264:	2203      	movs	r2, #3
 8002266:	4650      	mov	r0, sl
 8002268:	7821      	ldrb	r1, [r4, #0]
 800226a:	f000 fa19 	bl	80026a0 <memchr>
 800226e:	b138      	cbz	r0, 8002280 <_svfiprintf_r+0x150>
 8002270:	2240      	movs	r2, #64	@ 0x40
 8002272:	9b04      	ldr	r3, [sp, #16]
 8002274:	eba0 000a 	sub.w	r0, r0, sl
 8002278:	4082      	lsls	r2, r0
 800227a:	4313      	orrs	r3, r2
 800227c:	3401      	adds	r4, #1
 800227e:	9304      	str	r3, [sp, #16]
 8002280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002284:	2206      	movs	r2, #6
 8002286:	4825      	ldr	r0, [pc, #148]	@ (800231c <_svfiprintf_r+0x1ec>)
 8002288:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800228c:	f000 fa08 	bl	80026a0 <memchr>
 8002290:	2800      	cmp	r0, #0
 8002292:	d036      	beq.n	8002302 <_svfiprintf_r+0x1d2>
 8002294:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <_svfiprintf_r+0x1f0>)
 8002296:	bb1b      	cbnz	r3, 80022e0 <_svfiprintf_r+0x1b0>
 8002298:	9b03      	ldr	r3, [sp, #12]
 800229a:	3307      	adds	r3, #7
 800229c:	f023 0307 	bic.w	r3, r3, #7
 80022a0:	3308      	adds	r3, #8
 80022a2:	9303      	str	r3, [sp, #12]
 80022a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022a6:	4433      	add	r3, r6
 80022a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80022aa:	e76a      	b.n	8002182 <_svfiprintf_r+0x52>
 80022ac:	460c      	mov	r4, r1
 80022ae:	2001      	movs	r0, #1
 80022b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80022b4:	e7a8      	b.n	8002208 <_svfiprintf_r+0xd8>
 80022b6:	2300      	movs	r3, #0
 80022b8:	f04f 0c0a 	mov.w	ip, #10
 80022bc:	4619      	mov	r1, r3
 80022be:	3401      	adds	r4, #1
 80022c0:	9305      	str	r3, [sp, #20]
 80022c2:	4620      	mov	r0, r4
 80022c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022c8:	3a30      	subs	r2, #48	@ 0x30
 80022ca:	2a09      	cmp	r2, #9
 80022cc:	d903      	bls.n	80022d6 <_svfiprintf_r+0x1a6>
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0c6      	beq.n	8002260 <_svfiprintf_r+0x130>
 80022d2:	9105      	str	r1, [sp, #20]
 80022d4:	e7c4      	b.n	8002260 <_svfiprintf_r+0x130>
 80022d6:	4604      	mov	r4, r0
 80022d8:	2301      	movs	r3, #1
 80022da:	fb0c 2101 	mla	r1, ip, r1, r2
 80022de:	e7f0      	b.n	80022c2 <_svfiprintf_r+0x192>
 80022e0:	ab03      	add	r3, sp, #12
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	462a      	mov	r2, r5
 80022e6:	4638      	mov	r0, r7
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <_svfiprintf_r+0x1f4>)
 80022ea:	a904      	add	r1, sp, #16
 80022ec:	f3af 8000 	nop.w
 80022f0:	1c42      	adds	r2, r0, #1
 80022f2:	4606      	mov	r6, r0
 80022f4:	d1d6      	bne.n	80022a4 <_svfiprintf_r+0x174>
 80022f6:	89ab      	ldrh	r3, [r5, #12]
 80022f8:	065b      	lsls	r3, r3, #25
 80022fa:	f53f af2d 	bmi.w	8002158 <_svfiprintf_r+0x28>
 80022fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002300:	e72c      	b.n	800215c <_svfiprintf_r+0x2c>
 8002302:	ab03      	add	r3, sp, #12
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	462a      	mov	r2, r5
 8002308:	4638      	mov	r0, r7
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <_svfiprintf_r+0x1f4>)
 800230c:	a904      	add	r1, sp, #16
 800230e:	f000 f87d 	bl	800240c <_printf_i>
 8002312:	e7ed      	b.n	80022f0 <_svfiprintf_r+0x1c0>
 8002314:	080027d2 	.word	0x080027d2
 8002318:	080027d8 	.word	0x080027d8
 800231c:	080027dc 	.word	0x080027dc
 8002320:	00000000 	.word	0x00000000
 8002324:	08002079 	.word	0x08002079

08002328 <_printf_common>:
 8002328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800232c:	4616      	mov	r6, r2
 800232e:	4698      	mov	r8, r3
 8002330:	688a      	ldr	r2, [r1, #8]
 8002332:	690b      	ldr	r3, [r1, #16]
 8002334:	4607      	mov	r7, r0
 8002336:	4293      	cmp	r3, r2
 8002338:	bfb8      	it	lt
 800233a:	4613      	movlt	r3, r2
 800233c:	6033      	str	r3, [r6, #0]
 800233e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002342:	460c      	mov	r4, r1
 8002344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002348:	b10a      	cbz	r2, 800234e <_printf_common+0x26>
 800234a:	3301      	adds	r3, #1
 800234c:	6033      	str	r3, [r6, #0]
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	0699      	lsls	r1, r3, #26
 8002352:	bf42      	ittt	mi
 8002354:	6833      	ldrmi	r3, [r6, #0]
 8002356:	3302      	addmi	r3, #2
 8002358:	6033      	strmi	r3, [r6, #0]
 800235a:	6825      	ldr	r5, [r4, #0]
 800235c:	f015 0506 	ands.w	r5, r5, #6
 8002360:	d106      	bne.n	8002370 <_printf_common+0x48>
 8002362:	f104 0a19 	add.w	sl, r4, #25
 8002366:	68e3      	ldr	r3, [r4, #12]
 8002368:	6832      	ldr	r2, [r6, #0]
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	42ab      	cmp	r3, r5
 800236e:	dc2b      	bgt.n	80023c8 <_printf_common+0xa0>
 8002370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	3b00      	subs	r3, #0
 8002378:	bf18      	it	ne
 800237a:	2301      	movne	r3, #1
 800237c:	0692      	lsls	r2, r2, #26
 800237e:	d430      	bmi.n	80023e2 <_printf_common+0xba>
 8002380:	4641      	mov	r1, r8
 8002382:	4638      	mov	r0, r7
 8002384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002388:	47c8      	blx	r9
 800238a:	3001      	adds	r0, #1
 800238c:	d023      	beq.n	80023d6 <_printf_common+0xae>
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	6922      	ldr	r2, [r4, #16]
 8002392:	f003 0306 	and.w	r3, r3, #6
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf14      	ite	ne
 800239a:	2500      	movne	r5, #0
 800239c:	6833      	ldreq	r3, [r6, #0]
 800239e:	f04f 0600 	mov.w	r6, #0
 80023a2:	bf08      	it	eq
 80023a4:	68e5      	ldreq	r5, [r4, #12]
 80023a6:	f104 041a 	add.w	r4, r4, #26
 80023aa:	bf08      	it	eq
 80023ac:	1aed      	subeq	r5, r5, r3
 80023ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80023b2:	bf08      	it	eq
 80023b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023b8:	4293      	cmp	r3, r2
 80023ba:	bfc4      	itt	gt
 80023bc:	1a9b      	subgt	r3, r3, r2
 80023be:	18ed      	addgt	r5, r5, r3
 80023c0:	42b5      	cmp	r5, r6
 80023c2:	d11a      	bne.n	80023fa <_printf_common+0xd2>
 80023c4:	2000      	movs	r0, #0
 80023c6:	e008      	b.n	80023da <_printf_common+0xb2>
 80023c8:	2301      	movs	r3, #1
 80023ca:	4652      	mov	r2, sl
 80023cc:	4641      	mov	r1, r8
 80023ce:	4638      	mov	r0, r7
 80023d0:	47c8      	blx	r9
 80023d2:	3001      	adds	r0, #1
 80023d4:	d103      	bne.n	80023de <_printf_common+0xb6>
 80023d6:	f04f 30ff 	mov.w	r0, #4294967295
 80023da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023de:	3501      	adds	r5, #1
 80023e0:	e7c1      	b.n	8002366 <_printf_common+0x3e>
 80023e2:	2030      	movs	r0, #48	@ 0x30
 80023e4:	18e1      	adds	r1, r4, r3
 80023e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80023f0:	4422      	add	r2, r4
 80023f2:	3302      	adds	r3, #2
 80023f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80023f8:	e7c2      	b.n	8002380 <_printf_common+0x58>
 80023fa:	2301      	movs	r3, #1
 80023fc:	4622      	mov	r2, r4
 80023fe:	4641      	mov	r1, r8
 8002400:	4638      	mov	r0, r7
 8002402:	47c8      	blx	r9
 8002404:	3001      	adds	r0, #1
 8002406:	d0e6      	beq.n	80023d6 <_printf_common+0xae>
 8002408:	3601      	adds	r6, #1
 800240a:	e7d9      	b.n	80023c0 <_printf_common+0x98>

0800240c <_printf_i>:
 800240c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002410:	7e0f      	ldrb	r7, [r1, #24]
 8002412:	4691      	mov	r9, r2
 8002414:	2f78      	cmp	r7, #120	@ 0x78
 8002416:	4680      	mov	r8, r0
 8002418:	460c      	mov	r4, r1
 800241a:	469a      	mov	sl, r3
 800241c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800241e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002422:	d807      	bhi.n	8002434 <_printf_i+0x28>
 8002424:	2f62      	cmp	r7, #98	@ 0x62
 8002426:	d80a      	bhi.n	800243e <_printf_i+0x32>
 8002428:	2f00      	cmp	r7, #0
 800242a:	f000 80d3 	beq.w	80025d4 <_printf_i+0x1c8>
 800242e:	2f58      	cmp	r7, #88	@ 0x58
 8002430:	f000 80ba 	beq.w	80025a8 <_printf_i+0x19c>
 8002434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002438:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800243c:	e03a      	b.n	80024b4 <_printf_i+0xa8>
 800243e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002442:	2b15      	cmp	r3, #21
 8002444:	d8f6      	bhi.n	8002434 <_printf_i+0x28>
 8002446:	a101      	add	r1, pc, #4	@ (adr r1, 800244c <_printf_i+0x40>)
 8002448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800244c:	080024a5 	.word	0x080024a5
 8002450:	080024b9 	.word	0x080024b9
 8002454:	08002435 	.word	0x08002435
 8002458:	08002435 	.word	0x08002435
 800245c:	08002435 	.word	0x08002435
 8002460:	08002435 	.word	0x08002435
 8002464:	080024b9 	.word	0x080024b9
 8002468:	08002435 	.word	0x08002435
 800246c:	08002435 	.word	0x08002435
 8002470:	08002435 	.word	0x08002435
 8002474:	08002435 	.word	0x08002435
 8002478:	080025bb 	.word	0x080025bb
 800247c:	080024e3 	.word	0x080024e3
 8002480:	08002575 	.word	0x08002575
 8002484:	08002435 	.word	0x08002435
 8002488:	08002435 	.word	0x08002435
 800248c:	080025dd 	.word	0x080025dd
 8002490:	08002435 	.word	0x08002435
 8002494:	080024e3 	.word	0x080024e3
 8002498:	08002435 	.word	0x08002435
 800249c:	08002435 	.word	0x08002435
 80024a0:	0800257d 	.word	0x0800257d
 80024a4:	6833      	ldr	r3, [r6, #0]
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6032      	str	r2, [r6, #0]
 80024ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024b4:	2301      	movs	r3, #1
 80024b6:	e09e      	b.n	80025f6 <_printf_i+0x1ea>
 80024b8:	6833      	ldr	r3, [r6, #0]
 80024ba:	6820      	ldr	r0, [r4, #0]
 80024bc:	1d19      	adds	r1, r3, #4
 80024be:	6031      	str	r1, [r6, #0]
 80024c0:	0606      	lsls	r6, r0, #24
 80024c2:	d501      	bpl.n	80024c8 <_printf_i+0xbc>
 80024c4:	681d      	ldr	r5, [r3, #0]
 80024c6:	e003      	b.n	80024d0 <_printf_i+0xc4>
 80024c8:	0645      	lsls	r5, r0, #25
 80024ca:	d5fb      	bpl.n	80024c4 <_printf_i+0xb8>
 80024cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80024d0:	2d00      	cmp	r5, #0
 80024d2:	da03      	bge.n	80024dc <_printf_i+0xd0>
 80024d4:	232d      	movs	r3, #45	@ 0x2d
 80024d6:	426d      	negs	r5, r5
 80024d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024dc:	230a      	movs	r3, #10
 80024de:	4859      	ldr	r0, [pc, #356]	@ (8002644 <_printf_i+0x238>)
 80024e0:	e011      	b.n	8002506 <_printf_i+0xfa>
 80024e2:	6821      	ldr	r1, [r4, #0]
 80024e4:	6833      	ldr	r3, [r6, #0]
 80024e6:	0608      	lsls	r0, r1, #24
 80024e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80024ec:	d402      	bmi.n	80024f4 <_printf_i+0xe8>
 80024ee:	0649      	lsls	r1, r1, #25
 80024f0:	bf48      	it	mi
 80024f2:	b2ad      	uxthmi	r5, r5
 80024f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80024f6:	6033      	str	r3, [r6, #0]
 80024f8:	bf14      	ite	ne
 80024fa:	230a      	movne	r3, #10
 80024fc:	2308      	moveq	r3, #8
 80024fe:	4851      	ldr	r0, [pc, #324]	@ (8002644 <_printf_i+0x238>)
 8002500:	2100      	movs	r1, #0
 8002502:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002506:	6866      	ldr	r6, [r4, #4]
 8002508:	2e00      	cmp	r6, #0
 800250a:	bfa8      	it	ge
 800250c:	6821      	ldrge	r1, [r4, #0]
 800250e:	60a6      	str	r6, [r4, #8]
 8002510:	bfa4      	itt	ge
 8002512:	f021 0104 	bicge.w	r1, r1, #4
 8002516:	6021      	strge	r1, [r4, #0]
 8002518:	b90d      	cbnz	r5, 800251e <_printf_i+0x112>
 800251a:	2e00      	cmp	r6, #0
 800251c:	d04b      	beq.n	80025b6 <_printf_i+0x1aa>
 800251e:	4616      	mov	r6, r2
 8002520:	fbb5 f1f3 	udiv	r1, r5, r3
 8002524:	fb03 5711 	mls	r7, r3, r1, r5
 8002528:	5dc7      	ldrb	r7, [r0, r7]
 800252a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800252e:	462f      	mov	r7, r5
 8002530:	42bb      	cmp	r3, r7
 8002532:	460d      	mov	r5, r1
 8002534:	d9f4      	bls.n	8002520 <_printf_i+0x114>
 8002536:	2b08      	cmp	r3, #8
 8002538:	d10b      	bne.n	8002552 <_printf_i+0x146>
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	07df      	lsls	r7, r3, #31
 800253e:	d508      	bpl.n	8002552 <_printf_i+0x146>
 8002540:	6923      	ldr	r3, [r4, #16]
 8002542:	6861      	ldr	r1, [r4, #4]
 8002544:	4299      	cmp	r1, r3
 8002546:	bfde      	ittt	le
 8002548:	2330      	movle	r3, #48	@ 0x30
 800254a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800254e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002552:	1b92      	subs	r2, r2, r6
 8002554:	6122      	str	r2, [r4, #16]
 8002556:	464b      	mov	r3, r9
 8002558:	4621      	mov	r1, r4
 800255a:	4640      	mov	r0, r8
 800255c:	f8cd a000 	str.w	sl, [sp]
 8002560:	aa03      	add	r2, sp, #12
 8002562:	f7ff fee1 	bl	8002328 <_printf_common>
 8002566:	3001      	adds	r0, #1
 8002568:	d14a      	bne.n	8002600 <_printf_i+0x1f4>
 800256a:	f04f 30ff 	mov.w	r0, #4294967295
 800256e:	b004      	add	sp, #16
 8002570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	f043 0320 	orr.w	r3, r3, #32
 800257a:	6023      	str	r3, [r4, #0]
 800257c:	2778      	movs	r7, #120	@ 0x78
 800257e:	4832      	ldr	r0, [pc, #200]	@ (8002648 <_printf_i+0x23c>)
 8002580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	6831      	ldr	r1, [r6, #0]
 8002588:	061f      	lsls	r7, r3, #24
 800258a:	f851 5b04 	ldr.w	r5, [r1], #4
 800258e:	d402      	bmi.n	8002596 <_printf_i+0x18a>
 8002590:	065f      	lsls	r7, r3, #25
 8002592:	bf48      	it	mi
 8002594:	b2ad      	uxthmi	r5, r5
 8002596:	6031      	str	r1, [r6, #0]
 8002598:	07d9      	lsls	r1, r3, #31
 800259a:	bf44      	itt	mi
 800259c:	f043 0320 	orrmi.w	r3, r3, #32
 80025a0:	6023      	strmi	r3, [r4, #0]
 80025a2:	b11d      	cbz	r5, 80025ac <_printf_i+0x1a0>
 80025a4:	2310      	movs	r3, #16
 80025a6:	e7ab      	b.n	8002500 <_printf_i+0xf4>
 80025a8:	4826      	ldr	r0, [pc, #152]	@ (8002644 <_printf_i+0x238>)
 80025aa:	e7e9      	b.n	8002580 <_printf_i+0x174>
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	f023 0320 	bic.w	r3, r3, #32
 80025b2:	6023      	str	r3, [r4, #0]
 80025b4:	e7f6      	b.n	80025a4 <_printf_i+0x198>
 80025b6:	4616      	mov	r6, r2
 80025b8:	e7bd      	b.n	8002536 <_printf_i+0x12a>
 80025ba:	6833      	ldr	r3, [r6, #0]
 80025bc:	6825      	ldr	r5, [r4, #0]
 80025be:	1d18      	adds	r0, r3, #4
 80025c0:	6961      	ldr	r1, [r4, #20]
 80025c2:	6030      	str	r0, [r6, #0]
 80025c4:	062e      	lsls	r6, r5, #24
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	d501      	bpl.n	80025ce <_printf_i+0x1c2>
 80025ca:	6019      	str	r1, [r3, #0]
 80025cc:	e002      	b.n	80025d4 <_printf_i+0x1c8>
 80025ce:	0668      	lsls	r0, r5, #25
 80025d0:	d5fb      	bpl.n	80025ca <_printf_i+0x1be>
 80025d2:	8019      	strh	r1, [r3, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	4616      	mov	r6, r2
 80025d8:	6123      	str	r3, [r4, #16]
 80025da:	e7bc      	b.n	8002556 <_printf_i+0x14a>
 80025dc:	6833      	ldr	r3, [r6, #0]
 80025de:	2100      	movs	r1, #0
 80025e0:	1d1a      	adds	r2, r3, #4
 80025e2:	6032      	str	r2, [r6, #0]
 80025e4:	681e      	ldr	r6, [r3, #0]
 80025e6:	6862      	ldr	r2, [r4, #4]
 80025e8:	4630      	mov	r0, r6
 80025ea:	f000 f859 	bl	80026a0 <memchr>
 80025ee:	b108      	cbz	r0, 80025f4 <_printf_i+0x1e8>
 80025f0:	1b80      	subs	r0, r0, r6
 80025f2:	6060      	str	r0, [r4, #4]
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	6123      	str	r3, [r4, #16]
 80025f8:	2300      	movs	r3, #0
 80025fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025fe:	e7aa      	b.n	8002556 <_printf_i+0x14a>
 8002600:	4632      	mov	r2, r6
 8002602:	4649      	mov	r1, r9
 8002604:	4640      	mov	r0, r8
 8002606:	6923      	ldr	r3, [r4, #16]
 8002608:	47d0      	blx	sl
 800260a:	3001      	adds	r0, #1
 800260c:	d0ad      	beq.n	800256a <_printf_i+0x15e>
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	079b      	lsls	r3, r3, #30
 8002612:	d413      	bmi.n	800263c <_printf_i+0x230>
 8002614:	68e0      	ldr	r0, [r4, #12]
 8002616:	9b03      	ldr	r3, [sp, #12]
 8002618:	4298      	cmp	r0, r3
 800261a:	bfb8      	it	lt
 800261c:	4618      	movlt	r0, r3
 800261e:	e7a6      	b.n	800256e <_printf_i+0x162>
 8002620:	2301      	movs	r3, #1
 8002622:	4632      	mov	r2, r6
 8002624:	4649      	mov	r1, r9
 8002626:	4640      	mov	r0, r8
 8002628:	47d0      	blx	sl
 800262a:	3001      	adds	r0, #1
 800262c:	d09d      	beq.n	800256a <_printf_i+0x15e>
 800262e:	3501      	adds	r5, #1
 8002630:	68e3      	ldr	r3, [r4, #12]
 8002632:	9903      	ldr	r1, [sp, #12]
 8002634:	1a5b      	subs	r3, r3, r1
 8002636:	42ab      	cmp	r3, r5
 8002638:	dcf2      	bgt.n	8002620 <_printf_i+0x214>
 800263a:	e7eb      	b.n	8002614 <_printf_i+0x208>
 800263c:	2500      	movs	r5, #0
 800263e:	f104 0619 	add.w	r6, r4, #25
 8002642:	e7f5      	b.n	8002630 <_printf_i+0x224>
 8002644:	080027e3 	.word	0x080027e3
 8002648:	080027f4 	.word	0x080027f4

0800264c <memmove>:
 800264c:	4288      	cmp	r0, r1
 800264e:	b510      	push	{r4, lr}
 8002650:	eb01 0402 	add.w	r4, r1, r2
 8002654:	d902      	bls.n	800265c <memmove+0x10>
 8002656:	4284      	cmp	r4, r0
 8002658:	4623      	mov	r3, r4
 800265a:	d807      	bhi.n	800266c <memmove+0x20>
 800265c:	1e43      	subs	r3, r0, #1
 800265e:	42a1      	cmp	r1, r4
 8002660:	d008      	beq.n	8002674 <memmove+0x28>
 8002662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800266a:	e7f8      	b.n	800265e <memmove+0x12>
 800266c:	4601      	mov	r1, r0
 800266e:	4402      	add	r2, r0
 8002670:	428a      	cmp	r2, r1
 8002672:	d100      	bne.n	8002676 <memmove+0x2a>
 8002674:	bd10      	pop	{r4, pc}
 8002676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800267a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800267e:	e7f7      	b.n	8002670 <memmove+0x24>

08002680 <_sbrk_r>:
 8002680:	b538      	push	{r3, r4, r5, lr}
 8002682:	2300      	movs	r3, #0
 8002684:	4d05      	ldr	r5, [pc, #20]	@ (800269c <_sbrk_r+0x1c>)
 8002686:	4604      	mov	r4, r0
 8002688:	4608      	mov	r0, r1
 800268a:	602b      	str	r3, [r5, #0]
 800268c:	f7fd ff84 	bl	8000598 <_sbrk>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d102      	bne.n	800269a <_sbrk_r+0x1a>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	b103      	cbz	r3, 800269a <_sbrk_r+0x1a>
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	bd38      	pop	{r3, r4, r5, pc}
 800269c:	20000338 	.word	0x20000338

080026a0 <memchr>:
 80026a0:	4603      	mov	r3, r0
 80026a2:	b510      	push	{r4, lr}
 80026a4:	b2c9      	uxtb	r1, r1
 80026a6:	4402      	add	r2, r0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	d101      	bne.n	80026b2 <memchr+0x12>
 80026ae:	2000      	movs	r0, #0
 80026b0:	e003      	b.n	80026ba <memchr+0x1a>
 80026b2:	7804      	ldrb	r4, [r0, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	428c      	cmp	r4, r1
 80026b8:	d1f6      	bne.n	80026a8 <memchr+0x8>
 80026ba:	bd10      	pop	{r4, pc}

080026bc <memcpy>:
 80026bc:	440a      	add	r2, r1
 80026be:	4291      	cmp	r1, r2
 80026c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80026c4:	d100      	bne.n	80026c8 <memcpy+0xc>
 80026c6:	4770      	bx	lr
 80026c8:	b510      	push	{r4, lr}
 80026ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026ce:	4291      	cmp	r1, r2
 80026d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026d4:	d1f9      	bne.n	80026ca <memcpy+0xe>
 80026d6:	bd10      	pop	{r4, pc}

080026d8 <_realloc_r>:
 80026d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026dc:	4680      	mov	r8, r0
 80026de:	4615      	mov	r5, r2
 80026e0:	460c      	mov	r4, r1
 80026e2:	b921      	cbnz	r1, 80026ee <_realloc_r+0x16>
 80026e4:	4611      	mov	r1, r2
 80026e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026ea:	f7ff bc39 	b.w	8001f60 <_malloc_r>
 80026ee:	b92a      	cbnz	r2, 80026fc <_realloc_r+0x24>
 80026f0:	f7ff fbcc 	bl	8001e8c <_free_r>
 80026f4:	2400      	movs	r4, #0
 80026f6:	4620      	mov	r0, r4
 80026f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026fc:	f000 f81a 	bl	8002734 <_malloc_usable_size_r>
 8002700:	4285      	cmp	r5, r0
 8002702:	4606      	mov	r6, r0
 8002704:	d802      	bhi.n	800270c <_realloc_r+0x34>
 8002706:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800270a:	d8f4      	bhi.n	80026f6 <_realloc_r+0x1e>
 800270c:	4629      	mov	r1, r5
 800270e:	4640      	mov	r0, r8
 8002710:	f7ff fc26 	bl	8001f60 <_malloc_r>
 8002714:	4607      	mov	r7, r0
 8002716:	2800      	cmp	r0, #0
 8002718:	d0ec      	beq.n	80026f4 <_realloc_r+0x1c>
 800271a:	42b5      	cmp	r5, r6
 800271c:	462a      	mov	r2, r5
 800271e:	4621      	mov	r1, r4
 8002720:	bf28      	it	cs
 8002722:	4632      	movcs	r2, r6
 8002724:	f7ff ffca 	bl	80026bc <memcpy>
 8002728:	4621      	mov	r1, r4
 800272a:	4640      	mov	r0, r8
 800272c:	f7ff fbae 	bl	8001e8c <_free_r>
 8002730:	463c      	mov	r4, r7
 8002732:	e7e0      	b.n	80026f6 <_realloc_r+0x1e>

08002734 <_malloc_usable_size_r>:
 8002734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002738:	1f18      	subs	r0, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	bfbc      	itt	lt
 800273e:	580b      	ldrlt	r3, [r1, r0]
 8002740:	18c0      	addlt	r0, r0, r3
 8002742:	4770      	bx	lr

08002744 <_init>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	bf00      	nop
 8002748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274a:	bc08      	pop	{r3}
 800274c:	469e      	mov	lr, r3
 800274e:	4770      	bx	lr

08002750 <_fini>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	bf00      	nop
 8002754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002756:	bc08      	pop	{r3}
 8002758:	469e      	mov	lr, r3
 800275a:	4770      	bx	lr
